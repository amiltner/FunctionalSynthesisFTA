2019-11-15 23:43:00.426004-05:00  ( info)  
2019-11-15 23:43:00.426428-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:43:00.427311-05:00  ( info)  Answer list length: 2
2019-11-15 23:43:00.427638-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:43:00.427988-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:00.428642-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:43:00.428649-05:00  ( info)  Answer list length: 1
2019-11-15 23:43:00.428836-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:43:00.428978-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:00.429074-05:00  ( info)  Safe
2019-11-15 23:43:00.429227-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:00.429355-05:00  ( info)  Safe
2019-11-15 23:43:00.429524-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:00.429624-05:00  ( info)  Safe
2019-11-15 23:43:00.429772-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:00.430281-05:00  ( info)  Safe
2019-11-15 23:43:00.430487-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:43:00.430731-05:00  ( info)  Safe
2019-11-15 23:43:00.430898-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:43:00.431096-05:00  ( info)  Safe
2019-11-15 23:43:00.431296-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:43:00.431402-05:00  ( info)  Safe
2019-11-15 23:43:00.431407-05:00  ( info)  verifying proves postcondition
2019-11-15 23:43:00.476346-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:43:00.476376-05:00  ( info)  testbed
2019-11-15 23:43:00.476402-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:43:00.511475-05:00  ( info)  Answer list length: 2
2019-11-15 23:43:00.511660-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:43:00.511796-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:00.511953-05:00  ( info)  Safe
2019-11-15 23:43:00.512104-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:00.512191-05:00  ( info)  Safe
2019-11-15 23:43:00.512392-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:00.512485-05:00  ( info)  Safe
2019-11-15 23:43:00.512661-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:00.512795-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:43:00.512804-05:00  ( info)  Answer list length: 1
2019-11-15 23:43:00.512927-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:43:00.513060-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:00.513142-05:00  ( info)  Safe
2019-11-15 23:43:00.513298-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:00.513380-05:00  ( info)  Safe
2019-11-15 23:43:00.513520-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:00.513622-05:00  ( info)  Safe
2019-11-15 23:43:00.513750-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:00.514551-05:00  ( info)  Safe
2019-11-15 23:43:00.514705-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:43:00.515217-05:00  ( info)  Safe
2019-11-15 23:43:00.515362-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:43:00.515483-05:00  ( info)  Safe
2019-11-15 23:43:00.515651-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:43:00.515771-05:00  ( info)  Safe
2019-11-15 23:43:00.515789-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:43:00.515824-05:00  ( info)  testbed
2019-11-15 23:43:00.515850-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:43:00.599250-05:00  ( info)  Answer list length: 2
2019-11-15 23:43:00.599447-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:43:00.599566-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:00.599715-05:00  ( info)  Safe
2019-11-15 23:43:00.599852-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:00.599960-05:00  ( info)  Safe
2019-11-15 23:43:00.600106-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:00.600194-05:00  ( info)  Safe
2019-11-15 23:43:00.600361-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:00.603322-05:00  ( info)  Safe
2019-11-15 23:43:00.603475-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:43:00.605182-05:00  ( info)  Safe
2019-11-15 23:43:00.605326-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:43:00.605538-05:00  ( info)  Safe
2019-11-15 23:43:00.605705-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:43:00.605926-05:00  ( info)  Safe
2019-11-15 23:43:00.605928-05:00  ( info)  verifying proves postcondition
2019-11-15 23:43:02.578009-05:00  ( info)  postcondition proven
2019-11-15 23:43:02.578218-05:00  ( info)  verifying: []
2019-11-15 23:43:02.578353-05:00  ( info)  Safe
2019-11-15 23:43:02.578516-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:02.578605-05:00  ( info)  Safe
2019-11-15 23:43:02.578785-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:02.578881-05:00  ( info)  Safe
2019-11-15 23:43:02.579051-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:09.718034-05:00  ( info)  Safe
2019-11-15 23:43:09.718240-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:43:14.202367-05:00  ( info)  Safe
2019-11-15 23:43:14.202563-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:43:14.283814-05:00  ( info)  Safe
2019-11-15 23:43:14.284024-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:43:14.345864-05:00  ( info)  Safe
2019-11-15 23:43:52.499854-05:00  ( info)  
2019-11-15 23:43:52.500306-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:43:52.500704-05:00  ( info)  Answer list length: 2
2019-11-15 23:43:52.501011-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:43:52.501257-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:52.501931-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:43:52.501937-05:00  ( info)  Answer list length: 1
2019-11-15 23:43:52.502083-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:43:52.502211-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:52.502298-05:00  ( info)  Safe
2019-11-15 23:43:52.502436-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:52.502553-05:00  ( info)  Safe
2019-11-15 23:43:52.502705-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:52.502794-05:00  ( info)  Safe
2019-11-15 23:43:52.502925-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:52.503335-05:00  ( info)  Safe
2019-11-15 23:43:52.503501-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:43:52.503713-05:00  ( info)  Safe
2019-11-15 23:43:52.503858-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:43:52.503998-05:00  ( info)  Safe
2019-11-15 23:43:52.504152-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:43:52.504251-05:00  ( info)  Safe
2019-11-15 23:43:52.504255-05:00  ( info)  verifying proves postcondition
2019-11-15 23:43:52.549784-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:43:52.549814-05:00  ( info)  testbed
2019-11-15 23:43:52.549840-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:43:52.585537-05:00  ( info)  Answer list length: 2
2019-11-15 23:43:52.585784-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:43:52.585963-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:52.586176-05:00  ( info)  Safe
2019-11-15 23:43:52.586384-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:52.586505-05:00  ( info)  Safe
2019-11-15 23:43:52.586789-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:52.586919-05:00  ( info)  Safe
2019-11-15 23:43:52.587161-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:52.587338-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:43:52.587350-05:00  ( info)  Answer list length: 1
2019-11-15 23:43:52.587532-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:43:52.587696-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:52.587779-05:00  ( info)  Safe
2019-11-15 23:43:52.587933-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:52.588016-05:00  ( info)  Safe
2019-11-15 23:43:52.588156-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:52.588257-05:00  ( info)  Safe
2019-11-15 23:43:52.588385-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:52.589192-05:00  ( info)  Safe
2019-11-15 23:43:52.589340-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:43:52.589883-05:00  ( info)  Safe
2019-11-15 23:43:52.590028-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:43:52.590150-05:00  ( info)  Safe
2019-11-15 23:43:52.590318-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:43:52.590438-05:00  ( info)  Safe
2019-11-15 23:43:52.590456-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:43:52.590492-05:00  ( info)  testbed
2019-11-15 23:43:52.590518-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:43:52.674252-05:00  ( info)  Answer list length: 2
2019-11-15 23:43:52.674465-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:43:52.674607-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:43:52.674756-05:00  ( info)  Safe
2019-11-15 23:43:52.674892-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:52.675001-05:00  ( info)  Safe
2019-11-15 23:43:52.675144-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:52.675232-05:00  ( info)  Safe
2019-11-15 23:43:52.675399-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:43:52.678365-05:00  ( info)  Safe
2019-11-15 23:43:52.678519-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:43:52.680221-05:00  ( info)  Safe
2019-11-15 23:43:52.680365-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:43:52.680576-05:00  ( info)  Safe
2019-11-15 23:43:52.680742-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:43:52.680963-05:00  ( info)  Safe
2019-11-15 23:43:52.680965-05:00  ( info)  verifying proves postcondition
2019-11-15 23:43:56.001728-05:00  ( info)  postcondition proven
2019-11-15 23:43:56.001896-05:00  ( info)  verifying: []
2019-11-15 23:43:56.002009-05:00  ( info)  Safe
2019-11-15 23:43:56.002171-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:43:56.002257-05:00  ( info)  Safe
2019-11-15 23:43:56.002399-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:43:56.002507-05:00  ( info)  Safe
2019-11-15 23:43:56.002637-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:44:03.081904-05:00  ( info)  Safe
2019-11-15 23:44:03.082130-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:44:07.517013-05:00  ( info)  Safe
2019-11-15 23:44:07.517226-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:44:07.596457-05:00  ( info)  Safe
2019-11-15 23:44:07.596662-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:44:07.658999-05:00  ( info)  Safe
2019-11-15 23:44:29.059693-05:00  ( info)  
2019-11-15 23:44:29.060084-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:44:29.060479-05:00  ( info)  Answer list length: 2
2019-11-15 23:44:29.060815-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:44:29.061059-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:44:29.061667-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:44:29.061673-05:00  ( info)  Answer list length: 1
2019-11-15 23:44:29.061809-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:44:29.061935-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:44:29.062019-05:00  ( info)  Safe
2019-11-15 23:44:29.062156-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:44:29.062293-05:00  ( info)  Safe
2019-11-15 23:44:29.062441-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:44:29.062529-05:00  ( info)  Safe
2019-11-15 23:44:29.062664-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:44:29.063091-05:00  ( info)  Safe
2019-11-15 23:44:29.063266-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:44:29.063479-05:00  ( info)  Safe
2019-11-15 23:44:29.063626-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:44:29.063767-05:00  ( info)  Safe
2019-11-15 23:44:29.063923-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:44:29.064022-05:00  ( info)  Safe
2019-11-15 23:44:29.064026-05:00  ( info)  verifying proves postcondition
2019-11-15 23:44:29.108878-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:44:29.108908-05:00  ( info)  testbed
2019-11-15 23:44:29.108933-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:44:29.143393-05:00  ( info)  Answer list length: 2
2019-11-15 23:44:29.143575-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:44:29.143696-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:44:29.143842-05:00  ( info)  Safe
2019-11-15 23:44:29.143986-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:44:29.144069-05:00  ( info)  Safe
2019-11-15 23:44:29.144259-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:44:29.144347-05:00  ( info)  Safe
2019-11-15 23:44:29.144513-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:44:29.144635-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:44:29.144644-05:00  ( info)  Answer list length: 1
2019-11-15 23:44:29.144768-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:44:29.144904-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:44:29.144986-05:00  ( info)  Safe
2019-11-15 23:44:29.145141-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:44:29.145224-05:00  ( info)  Safe
2019-11-15 23:44:29.145364-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:44:29.145467-05:00  ( info)  Safe
2019-11-15 23:44:29.145596-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:44:29.146392-05:00  ( info)  Safe
2019-11-15 23:44:29.146540-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:44:29.147053-05:00  ( info)  Safe
2019-11-15 23:44:29.147257-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:44:29.147400-05:00  ( info)  Safe
2019-11-15 23:44:29.147609-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:44:29.147732-05:00  ( info)  Safe
2019-11-15 23:44:29.147750-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:44:29.147787-05:00  ( info)  testbed
2019-11-15 23:44:29.147814-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:44:29.233160-05:00  ( info)  Answer list length: 2
2019-11-15 23:44:29.233360-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:44:29.233481-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:44:29.233639-05:00  ( info)  Safe
2019-11-15 23:44:29.233778-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:44:29.233886-05:00  ( info)  Safe
2019-11-15 23:44:29.234032-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:44:29.234121-05:00  ( info)  Safe
2019-11-15 23:44:29.234293-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:44:29.237371-05:00  ( info)  Safe
2019-11-15 23:44:29.237530-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:44:29.239804-05:00  ( info)  Safe
2019-11-15 23:44:29.239999-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:44:29.240215-05:00  ( info)  Safe
2019-11-15 23:44:29.240383-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:44:29.240607-05:00  ( info)  Safe
2019-11-15 23:44:29.240609-05:00  ( info)  verifying proves postcondition
2019-11-15 23:44:33.846225-05:00  ( info)  postcondition proven
2019-11-15 23:44:33.846502-05:00  ( info)  verifying: []
2019-11-15 23:44:33.846616-05:00  ( info)  Safe
2019-11-15 23:44:33.846761-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:44:33.846863-05:00  ( info)  Safe
2019-11-15 23:44:33.847014-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:44:33.847122-05:00  ( info)  Safe
2019-11-15 23:44:33.847253-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:44:40.981532-05:00  ( info)  Safe
2019-11-15 23:44:40.981737-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:44:45.440180-05:00  ( info)  Safe
2019-11-15 23:44:45.440404-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:44:45.518568-05:00  ( info)  Safe
2019-11-15 23:44:45.518781-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:44:45.582513-05:00  ( info)  Safe
2019-11-15 23:45:14.796463-05:00  ( info)  
2019-11-15 23:45:14.796888-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:45:14.797295-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:14.797596-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:45:14.797843-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:14.798512-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:45:14.798519-05:00  ( info)  Answer list length: 1
2019-11-15 23:45:14.798663-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:45:14.798790-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:14.798877-05:00  ( info)  Safe
2019-11-15 23:45:14.799016-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:14.799130-05:00  ( info)  Safe
2019-11-15 23:45:14.799282-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:14.799372-05:00  ( info)  Safe
2019-11-15 23:45:14.799506-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:14.799915-05:00  ( info)  Safe
2019-11-15 23:45:14.800083-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:14.800295-05:00  ( info)  Safe
2019-11-15 23:45:14.800440-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:45:14.800587-05:00  ( info)  Safe
2019-11-15 23:45:14.800742-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:45:14.800842-05:00  ( info)  Safe
2019-11-15 23:45:14.800846-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:14.847196-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:45:14.847225-05:00  ( info)  testbed
2019-11-15 23:45:14.847251-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:45:14.884238-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:14.884429-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:45:14.884555-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:14.884710-05:00  ( info)  Safe
2019-11-15 23:45:14.884860-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:14.884944-05:00  ( info)  Safe
2019-11-15 23:45:14.885169-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:14.885259-05:00  ( info)  Safe
2019-11-15 23:45:14.885431-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:14.885555-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:45:14.885564-05:00  ( info)  Answer list length: 1
2019-11-15 23:45:14.885690-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:45:14.885829-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:14.885913-05:00  ( info)  Safe
2019-11-15 23:45:14.886074-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:14.886158-05:00  ( info)  Safe
2019-11-15 23:45:14.886303-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:14.886407-05:00  ( info)  Safe
2019-11-15 23:45:14.886540-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:14.887356-05:00  ( info)  Safe
2019-11-15 23:45:14.887509-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:14.888033-05:00  ( info)  Safe
2019-11-15 23:45:14.888183-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:45:14.888307-05:00  ( info)  Safe
2019-11-15 23:45:14.888482-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:45:14.888605-05:00  ( info)  Safe
2019-11-15 23:45:14.888623-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:45:14.888660-05:00  ( info)  testbed
2019-11-15 23:45:14.888687-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:14.973197-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:14.973409-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:45:14.973530-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:14.973677-05:00  ( info)  Safe
2019-11-15 23:45:14.973814-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:14.973922-05:00  ( info)  Safe
2019-11-15 23:45:14.974067-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:14.974155-05:00  ( info)  Safe
2019-11-15 23:45:14.974323-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:14.977278-05:00  ( info)  Safe
2019-11-15 23:45:14.977433-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:14.979155-05:00  ( info)  Safe
2019-11-15 23:45:14.979301-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:45:14.979511-05:00  ( info)  Safe
2019-11-15 23:45:14.979679-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:45:14.979899-05:00  ( info)  Safe
2019-11-15 23:45:14.979902-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:18.242677-05:00  ( info)  postcondition proven
2019-11-15 23:45:18.242844-05:00  ( info)  verifying: []
2019-11-15 23:45:18.242957-05:00  ( info)  Safe
2019-11-15 23:45:18.243121-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:18.243206-05:00  ( info)  Safe
2019-11-15 23:45:18.243349-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:18.243457-05:00  ( info)  Safe
2019-11-15 23:45:18.243588-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:25.344107-05:00  ( info)  Safe
2019-11-15 23:45:25.344323-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:29.830667-05:00  ( info)  Safe
2019-11-15 23:45:29.830875-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:45:29.913525-05:00  ( info)  Safe
2019-11-15 23:45:29.913736-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:45:29.978765-05:00  ( info)  Safe
2019-11-15 23:45:41.752573-05:00  ( info)  
2019-11-15 23:45:41.753001-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:45:41.753954-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:41.754487-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:45:41.754912-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:41.756034-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:45:41.756042-05:00  ( info)  Answer list length: 1
2019-11-15 23:45:41.756217-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:45:41.756365-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:41.756474-05:00  ( info)  Safe
2019-11-15 23:45:41.756650-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:41.756751-05:00  ( info)  Safe
2019-11-15 23:45:41.756928-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:41.757078-05:00  ( info)  Safe
2019-11-15 23:45:41.757247-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:41.757781-05:00  ( info)  Safe
2019-11-15 23:45:41.757997-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:41.758325-05:00  ( info)  Safe
2019-11-15 23:45:41.758330-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:41.770207-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:45:41.770231-05:00  ( info)  testbed
2019-11-15 23:45:41.770256-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:45:41.797466-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:41.797625-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:45:41.797723-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:41.797807-05:00  ( info)  Safe
2019-11-15 23:45:41.797972-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:41.798039-05:00  ( info)  Safe
2019-11-15 23:45:41.798161-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:41.798338-05:00  ( info)  Safe
2019-11-15 23:45:41.798450-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:41.798556-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:45:41.798564-05:00  ( info)  Answer list length: 1
2019-11-15 23:45:41.798691-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:45:41.798787-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:41.798854-05:00  ( info)  Safe
2019-11-15 23:45:41.799008-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:41.799074-05:00  ( info)  Safe
2019-11-15 23:45:41.799295-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:41.799403-05:00  ( info)  Safe
2019-11-15 23:45:41.799554-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:41.800483-05:00  ( info)  Safe
2019-11-15 23:45:41.800637-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:41.801206-05:00  ( info)  Safe
2019-11-15 23:45:41.801225-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:45:41.801288-05:00  ( info)  testbed
2019-11-15 23:45:41.801315-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:41.861780-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:41.861970-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match l2 with
                                    | Nil N_fresh_var_1 -> True
                                    | Cons N_fresh_var_1 -> (fun (n2:unit) ->
                                                               (fun (l3:unit) ->
                                                                  False)
                                                                 (#2
                                                                    N_fresh_var_1))
                                                              (#1
                                                                 N_fresh_var_1))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:41.862401-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:41.862487-05:00  ( info)  Safe
2019-11-15 23:45:41.862607-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:41.862712-05:00  ( info)  Safe
2019-11-15 23:45:41.862840-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:41.862913-05:00  ( info)  Safe
2019-11-15 23:45:41.863136-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:41.863867-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:45:41.863880-05:00  ( info)  Answer list length: 1
2019-11-15 23:45:41.863993-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:45:41.864089-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:41.864184-05:00  ( info)  Safe
2019-11-15 23:45:41.864298-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:41.864365-05:00  ( info)  Safe
2019-11-15 23:45:41.864484-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:41.864625-05:00  ( info)  Safe
2019-11-15 23:45:41.864735-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:41.866198-05:00  ( info)  Safe
2019-11-15 23:45:41.866335-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:41.867397-05:00  ( info)  Safe
2019-11-15 23:45:41.867415-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:45:41.867475-05:00  ( info)  testbed
2019-11-15 23:45:41.867513-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:41.891125-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:41.891326-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match l2 with
                                    | Nil N_fresh_var_1 -> True
                                    | Cons N_fresh_var_1 -> (fun (n2:unit) ->
                                                               (fun (l3:unit) ->
                                                                  nat_lt n2
                                                                    n1)
                                                                 (#2
                                                                    N_fresh_var_1))
                                                              (#1
                                                                 N_fresh_var_1))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:41.891426-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:41.891512-05:00  ( info)  Safe
2019-11-15 23:45:41.891669-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:41.891736-05:00  ( info)  Safe
2019-11-15 23:45:41.891889-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:41.891972-05:00  ( info)  Safe
2019-11-15 23:45:41.892101-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:41.894789-05:00  ( info)  Safe
2019-11-15 23:45:41.894932-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:41.896791-05:00  ( info)  Safe
2019-11-15 23:45:41.896793-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:42.216875-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Cons\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
2019-11-15 23:45:42.218093-05:00  ( info)  testbed
2019-11-15 23:45:42.218180-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Cons",
                      (Value.Tuple
                         [(Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Nil", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:42.258336-05:00  ( info)  Answer list length: 3
2019-11-15 23:45:42.258507-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) -> nat_lte (size l2) n1)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:42.258606-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:42.258706-05:00  ( info)  Safe
2019-11-15 23:45:42.258832-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:42.258922-05:00  ( info)  Safe
2019-11-15 23:45:42.259140-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:42.259211-05:00  ( info)  Safe
2019-11-15 23:45:42.259320-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:42.261710-05:00  ( info)  Safe
2019-11-15 23:45:42.261845-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:42.263513-05:00  ( info)  Safe
2019-11-15 23:45:42.263515-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:42.292241-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:45:42.292763-05:00  ( info)  testbed
2019-11-15 23:45:42.292837-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Cons",
                       (Value.Tuple
                          [(Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Nil", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:42.585292-05:00  ( info)  Answer list length: 4
2019-11-15 23:45:42.585477-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match n1 with
                                    | O N_fresh_var_1 -> nat_lte (size l2) n1
                                    | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                            nat_eq
                                                              (size
                                                                 (delete l2
                                                                    n1))
                                                              n1)
                                                           N_fresh_var_1)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:42.585584-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:42.585680-05:00  ( info)  Safe
2019-11-15 23:45:42.585789-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:42.585885-05:00  ( info)  Safe
2019-11-15 23:45:42.586010-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:42.586083-05:00  ( info)  Safe
2019-11-15 23:45:42.586191-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:42.586379-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:45:42.586537-05:00  ( info)  Answer list length: 3
2019-11-15 23:45:42.586679-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) -> nat_lte (size l2) n1)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:42.586774-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:42.586848-05:00  ( info)  Safe
2019-11-15 23:45:42.586954-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:42.587043-05:00  ( info)  Safe
2019-11-15 23:45:42.587167-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:42.587239-05:00  ( info)  Safe
2019-11-15 23:45:42.587367-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:42.588725-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:45:42.588759-05:00  ( info)  Answer list length: 1
2019-11-15 23:45:42.588879-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:45:42.588973-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:42.589041-05:00  ( info)  Safe
2019-11-15 23:45:42.589172-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:42.589239-05:00  ( info)  Safe
2019-11-15 23:45:42.589356-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:42.589428-05:00  ( info)  Safe
2019-11-15 23:45:42.589557-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:42.591953-05:00  ( info)  Safe
2019-11-15 23:45:42.592099-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:42.593987-05:00  ( info)  Safe
2019-11-15 23:45:42.594005-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:45:42.595091-05:00  ( info)  testbed
2019-11-15 23:45:42.595148-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:42.597362-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:42.597506-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) -> not (lookup l2 n1))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:42.597602-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:42.597681-05:00  ( info)  Safe
2019-11-15 23:45:42.597787-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:42.597863-05:00  ( info)  Safe
2019-11-15 23:45:42.597980-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:42.598052-05:00  ( info)  Safe
2019-11-15 23:45:42.598174-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:42.603151-05:00  ( info)  Safe
2019-11-15 23:45:42.603290-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:42.606623-05:00  ( info)  Safe
2019-11-15 23:45:42.606625-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:43.052971-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Cons\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
2019-11-15 23:45:43.054029-05:00  ( info)  testbed
2019-11-15 23:45:43.054105-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Cons",
                      (Value.Tuple
                         [(Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Nil", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:43.064389-05:00  ( info)  Answer list length: 3
2019-11-15 23:45:43.064572-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match l2 with
                                    | Nil N_fresh_var_1 -> True
                                    | Cons N_fresh_var_1 -> (fun (n2:unit) ->
                                                               (fun (l3:unit) ->
                                                                  lookup l1
                                                                    (
                                                                    size l2))
                                                                 (#2
                                                                    N_fresh_var_1))
                                                              (#1
                                                                 N_fresh_var_1))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.064673-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.064791-05:00  ( info)  Safe
2019-11-15 23:45:43.064908-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.064978-05:00  ( info)  Safe
2019-11-15 23:45:43.065097-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.065210-05:00  ( info)  Safe
2019-11-15 23:45:43.065318-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.066246-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\",\n          (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:45:43.066379-05:00  ( info)  Answer list length: 2
2019-11-15 23:45:43.066507-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) -> not (lookup l2 n1))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.066620-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.066700-05:00  ( info)  Safe
2019-11-15 23:45:43.066807-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.066904-05:00  ( info)  Safe
2019-11-15 23:45:43.067030-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.067104-05:00  ( info)  Safe
2019-11-15 23:45:43.067240-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.073710-05:00  ( info)  Safe
2019-11-15 23:45:43.073850-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:43.078286-05:00  ( info)  Safe
2019-11-15 23:45:43.078314-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Cons\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
2019-11-15 23:45:43.081986-05:00  ( info)  Answer list length: 3
2019-11-15 23:45:43.082129-05:00  ( info)  Candidate invariant: fix f1 (l1:list) : bool =
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match n1 with
                                    | O N_fresh_var_1 -> lookup l1 (size l2)
                                    | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                            f1 l2)
                                                           N_fresh_var_1)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.082226-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.082337-05:00  ( info)  Safe
2019-11-15 23:45:43.082480-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.082550-05:00  ( info)  Safe
2019-11-15 23:45:43.082713-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.082787-05:00  ( info)  Safe
2019-11-15 23:45:43.082894-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.091264-05:00  ( info)  Safe
2019-11-15 23:45:43.091461-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:43.097362-05:00  ( info)  Safe
2019-11-15 23:45:43.097365-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:43.126562-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:45:43.127027-05:00  ( info)  testbed
2019-11-15 23:45:43.127130-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Cons",
                       (Value.Tuple
                          [(Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Nil", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S",
             (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:43.156610-05:00  ( info)  Answer list length: 4
2019-11-15 23:45:43.156801-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match l2 with
                                    | Nil N_fresh_var_1 -> True
                                    | Cons N_fresh_var_1 -> (fun (n2:unit) ->
                                                               (fun (l3:unit) ->
                                                                  not
                                                                    (
                                                                    lookup
                                                                    (delete
                                                                    l1 n2) n2))
                                                                 (#2
                                                                    N_fresh_var_1))
                                                              (#1
                                                                 N_fresh_var_1))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.156934-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.157035-05:00  ( info)  Safe
2019-11-15 23:45:43.157147-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.157342-05:00  ( info)  Safe
2019-11-15 23:45:43.157464-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.157537-05:00  ( info)  Safe
2019-11-15 23:45:43.157669-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.170572-05:00  ( info)  Safe
2019-11-15 23:45:43.170745-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:43.180017-05:00  ( info)  Safe
2019-11-15 23:45:43.180023-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:43.632609-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Cons\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
2019-11-15 23:45:43.644076-05:00  ( info)  Answer list length: 5
2019-11-15 23:45:43.644302-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match n1 with
                                    | O N_fresh_var_1 -> lookup l1 (size l2)
                                    | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                            nat_lte
                                                              (size
                                                                 (delete l1
                                                                    n2))
                                                              n1)
                                                           N_fresh_var_1)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.644414-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.644516-05:00  ( info)  Safe
2019-11-15 23:45:43.644659-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.644729-05:00  ( info)  Safe
2019-11-15 23:45:43.644851-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.644935-05:00  ( info)  Safe
2019-11-15 23:45:43.645161-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.664107-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Cons\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\",\n          (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:45:43.665182-05:00  ( info)  Answer list length: 4
2019-11-15 23:45:43.665370-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match l2 with
                                    | Nil N_fresh_var_1 -> True
                                    | Cons N_fresh_var_1 -> (fun (n2:unit) ->
                                                               (fun (l3:unit) ->
                                                                  not
                                                                    (
                                                                    lookup
                                                                    (delete
                                                                    l1 n2) n2))
                                                                 (#2
                                                                    N_fresh_var_1))
                                                              (#1
                                                                 N_fresh_var_1))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.665468-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.665593-05:00  ( info)  Safe
2019-11-15 23:45:43.665703-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.665773-05:00  ( info)  Safe
2019-11-15 23:45:43.666018-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.666093-05:00  ( info)  Safe
2019-11-15 23:45:43.666205-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.683373-05:00  ( info)  Safe
2019-11-15 23:45:43.683551-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:43.693640-05:00  ( info)  Safe
2019-11-15 23:45:43.693671-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Cons\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
2019-11-15 23:45:43.694614-05:00  ( info)  testbed
2019-11-15 23:45:43.694745-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Cons",
                      (Value.Tuple
                         [(Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Nil", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Cons",
                       (Value.Tuple
                          [(Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Nil", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                   (Value.Ctor ("Cons",
                      (Value.Tuple
                         [(Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Nil", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:43.720179-05:00  ( info)  Answer list length: 5
2019-11-15 23:45:43.720367-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match n1 with
                                    | O N_fresh_var_1 -> lookup l1 (size l2)
                                    | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                            lookup l1
                                                              (size
                                                                 (delete l1
                                                                    n2)))
                                                           N_fresh_var_1)
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.720466-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.720594-05:00  ( info)  Safe
2019-11-15 23:45:43.720705-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.720774-05:00  ( info)  Safe
2019-11-15 23:45:43.720915-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.720988-05:00  ( info)  Safe
2019-11-15 23:45:43.721120-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.721419-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"S\",\n          (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:45:43.722428-05:00  ( info)  Answer list length: 4
2019-11-15 23:45:43.722592-05:00  ( info)  Candidate invariant: fun (l1:list) ->
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  match l2 with
                                    | Nil N_fresh_var_1 -> True
                                    | Cons N_fresh_var_1 -> (fun (n2:unit) ->
                                                               (fun (l3:unit) ->
                                                                  not
                                                                    (
                                                                    lookup
                                                                    (delete
                                                                    l1 n2) n2))
                                                                 (#2
                                                                    N_fresh_var_1))
                                                              (#1
                                                                 N_fresh_var_1))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.722690-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.722779-05:00  ( info)  Safe
2019-11-15 23:45:43.722919-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.722989-05:00  ( info)  Safe
2019-11-15 23:45:43.723108-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.723208-05:00  ( info)  Safe
2019-11-15 23:45:43.723318-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.739314-05:00  ( info)  Safe
2019-11-15 23:45:43.739528-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:43.749589-05:00  ( info)  Safe
2019-11-15 23:45:43.749618-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Cons\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
2019-11-15 23:45:43.751391-05:00  ( info)  testbed
2019-11-15 23:45:43.751530-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Cons",
                      (Value.Tuple
                         [(Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Nil", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Cons",
                       (Value.Tuple
                          [(Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Nil", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("S",
             (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                    (Value.Ctor ("Cons",
                       (Value.Tuple
                          [(Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Nil", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Nil", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:45:43.911215-05:00  ( info)  Answer list length: 5
2019-11-15 23:45:43.911421-05:00  ( info)  Candidate invariant: fix f1 (l1:list) : bool =
  match l1 with
    | Nil N_fresh_var_0 -> True
    | Cons N_fresh_var_0 -> (fun (n1:unit) ->
                               (fun (l2:unit) ->
                                  and (not (lookup l2 n1)) (f1 l2))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:45:43.911517-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:45:43.911609-05:00  ( info)  Safe
2019-11-15 23:45:43.911739-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:43.911807-05:00  ( info)  Safe
2019-11-15 23:45:43.911926-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:43.911999-05:00  ( info)  Safe
2019-11-15 23:45:43.912129-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:43.925168-05:00  ( info)  Safe
2019-11-15 23:45:43.925314-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:43.933758-05:00  ( info)  Safe
2019-11-15 23:45:43.933761-05:00  ( info)  verifying proves postcondition
2019-11-15 23:45:45.789141-05:00  ( info)  postcondition proven
2019-11-15 23:45:45.789291-05:00  ( info)  verifying: []
2019-11-15 23:45:45.789403-05:00  ( info)  Safe
2019-11-15 23:45:45.789530-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:45:45.789599-05:00  ( info)  Safe
2019-11-15 23:45:45.789822-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:45:45.789895-05:00  ( info)  Safe
2019-11-15 23:45:45.790006-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:45:51.743460-05:00  ( info)  Safe
2019-11-15 23:45:51.743643-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:45:55.704318-05:00  ( info)  Safe
2019-11-15 23:46:00.581400-05:00  ( info)  
2019-11-15 23:46:00.581831-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:46:00.582261-05:00  ( info)  Answer list length: 2
2019-11-15 23:46:00.582581-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:46:00.582842-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:46:00.583537-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:46:00.583543-05:00  ( info)  Answer list length: 1
2019-11-15 23:46:00.583693-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:46:00.583827-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:46:00.583918-05:00  ( info)  Safe
2019-11-15 23:46:00.584060-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:46:00.584176-05:00  ( info)  Safe
2019-11-15 23:46:00.584334-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:46:00.584425-05:00  ( info)  Safe
2019-11-15 23:46:00.584561-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:46:00.585023-05:00  ( info)  Safe
2019-11-15 23:46:00.585215-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:46:00.585434-05:00  ( info)  Safe
2019-11-15 23:46:00.585584-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:46:00.585728-05:00  ( info)  Safe
2019-11-15 23:46:00.585887-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:46:00.585988-05:00  ( info)  Safe
2019-11-15 23:46:00.585993-05:00  ( info)  verifying proves postcondition
2019-11-15 23:46:00.632057-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:46:00.632085-05:00  ( info)  testbed
2019-11-15 23:46:00.632111-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:46:00.668048-05:00  ( info)  Answer list length: 2
2019-11-15 23:46:00.668236-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:46:00.668363-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:46:00.668514-05:00  ( info)  Safe
2019-11-15 23:46:00.668659-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:46:00.668742-05:00  ( info)  Safe
2019-11-15 23:46:00.668969-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:46:00.669056-05:00  ( info)  Safe
2019-11-15 23:46:00.669227-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:46:00.669350-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:46:00.669359-05:00  ( info)  Answer list length: 1
2019-11-15 23:46:00.669484-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:46:00.669626-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:46:00.669708-05:00  ( info)  Safe
2019-11-15 23:46:00.669888-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:46:00.669971-05:00  ( info)  Safe
2019-11-15 23:46:00.670112-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:46:00.670216-05:00  ( info)  Safe
2019-11-15 23:46:00.670345-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:46:00.671152-05:00  ( info)  Safe
2019-11-15 23:46:00.671301-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:46:00.671824-05:00  ( info)  Safe
2019-11-15 23:46:00.671971-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:46:00.672093-05:00  ( info)  Safe
2019-11-15 23:46:00.672263-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:46:00.672382-05:00  ( info)  Safe
2019-11-15 23:46:00.672400-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:46:00.672436-05:00  ( info)  testbed
2019-11-15 23:46:00.672462-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:46:00.757531-05:00  ( info)  Answer list length: 2
2019-11-15 23:46:00.757722-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:46:00.757844-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:46:00.757991-05:00  ( info)  Safe
2019-11-15 23:46:00.758129-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:46:00.758248-05:00  ( info)  Safe
2019-11-15 23:46:00.758421-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:46:00.758520-05:00  ( info)  Safe
2019-11-15 23:46:00.758689-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:46:00.761674-05:00  ( info)  Safe
2019-11-15 23:46:00.761829-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:46:00.763530-05:00  ( info)  Safe
2019-11-15 23:46:00.763674-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:46:00.763886-05:00  ( info)  Safe
2019-11-15 23:46:00.764054-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:46:00.764279-05:00  ( info)  Safe
2019-11-15 23:46:00.764281-05:00  ( info)  verifying proves postcondition
2019-11-15 23:46:04.033163-05:00  ( info)  postcondition proven
2019-11-15 23:46:04.033330-05:00  ( info)  verifying: []
2019-11-15 23:46:04.033443-05:00  ( info)  Safe
2019-11-15 23:46:04.033606-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:46:04.033691-05:00  ( info)  Safe
2019-11-15 23:46:04.033834-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:46:04.033939-05:00  ( info)  Safe
2019-11-15 23:46:04.034069-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:46:11.164681-05:00  ( info)  Safe
2019-11-15 23:46:11.164897-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:46:15.761783-05:00  ( info)  Safe
2019-11-15 23:46:15.761978-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:46:15.849055-05:00  ( info)  Safe
2019-11-15 23:46:15.849272-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:46:15.913700-05:00  ( info)  Safe
2019-11-15 23:47:32.367151-05:00  ( info)  
2019-11-15 23:47:32.367577-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:47:32.367981-05:00  ( info)  Answer list length: 2
2019-11-15 23:47:32.368324-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:47:32.368574-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:47:32.369277-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:47:32.369284-05:00  ( info)  Answer list length: 1
2019-11-15 23:47:32.369434-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:47:32.369565-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:47:32.369652-05:00  ( info)  Safe
2019-11-15 23:47:32.369791-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:47:32.369930-05:00  ( info)  Safe
2019-11-15 23:47:32.370117-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:47:32.370219-05:00  ( info)  Safe
2019-11-15 23:47:32.370370-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:47:32.370851-05:00  ( info)  Safe
2019-11-15 23:47:32.371137-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:47:32.371416-05:00  ( info)  Safe
2019-11-15 23:47:32.371604-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:47:32.371779-05:00  ( info)  Safe
2019-11-15 23:47:32.371957-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:47:32.372071-05:00  ( info)  Safe
2019-11-15 23:47:32.372077-05:00  ( info)  verifying proves postcondition
2019-11-15 23:47:32.417968-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:47:32.417999-05:00  ( info)  testbed
2019-11-15 23:47:32.418024-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:47:32.451789-05:00  ( info)  Answer list length: 2
2019-11-15 23:47:32.451972-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:47:32.452093-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:47:32.452253-05:00  ( info)  Safe
2019-11-15 23:47:32.452410-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:47:32.452524-05:00  ( info)  Safe
2019-11-15 23:47:32.452722-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:47:32.452809-05:00  ( info)  Safe
2019-11-15 23:47:32.452956-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:47:32.453078-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:47:32.453086-05:00  ( info)  Answer list length: 1
2019-11-15 23:47:32.453217-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:47:32.453348-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:47:32.453431-05:00  ( info)  Safe
2019-11-15 23:47:32.453558-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:47:32.453660-05:00  ( info)  Safe
2019-11-15 23:47:32.453808-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:47:32.453922-05:00  ( info)  Safe
2019-11-15 23:47:32.454052-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:47:32.454971-05:00  ( info)  Safe
2019-11-15 23:47:32.455161-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:47:32.455740-05:00  ( info)  Safe
2019-11-15 23:47:32.455892-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:47:32.456031-05:00  ( info)  Safe
2019-11-15 23:47:32.456179-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:47:32.456325-05:00  ( info)  Safe
2019-11-15 23:47:32.456344-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:47:32.456382-05:00  ( info)  testbed
2019-11-15 23:47:32.456411-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:47:32.540604-05:00  ( info)  Answer list length: 2
2019-11-15 23:47:32.540785-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:47:32.540905-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:47:32.541100-05:00  ( info)  Safe
2019-11-15 23:47:32.541236-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:47:32.541319-05:00  ( info)  Safe
2019-11-15 23:47:32.541499-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:47:32.541592-05:00  ( info)  Safe
2019-11-15 23:47:32.541767-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:47:32.544596-05:00  ( info)  Safe
2019-11-15 23:47:32.544753-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:47:32.546474-05:00  ( info)  Safe
2019-11-15 23:47:32.546622-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:47:32.546850-05:00  ( info)  Safe
2019-11-15 23:47:32.547026-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:47:32.547279-05:00  ( info)  Safe
2019-11-15 23:47:32.547281-05:00  ( info)  verifying proves postcondition
2019-11-15 23:47:35.863828-05:00  ( info)  postcondition proven
2019-11-15 23:47:35.864022-05:00  ( info)  verifying: []
2019-11-15 23:47:35.864232-05:00  ( info)  Safe
2019-11-15 23:47:35.864378-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:47:35.864464-05:00  ( info)  Safe
2019-11-15 23:47:35.864636-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:47:35.864727-05:00  ( info)  Safe
2019-11-15 23:47:35.864860-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:47:42.971596-05:00  ( info)  Safe
2019-11-15 23:47:42.971863-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:47:47.510052-05:00  ( info)  Safe
2019-11-15 23:47:47.510249-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:47:47.592833-05:00  ( info)  Safe
2019-11-15 23:47:47.593039-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:47:47.655527-05:00  ( info)  Safe
2019-11-15 23:48:37.445797-05:00  ( info)  
2019-11-15 23:48:37.446226-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:48:37.446633-05:00  ( info)  Answer list length: 2
2019-11-15 23:48:37.446944-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:48:37.447199-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:48:37.447925-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:48:37.447932-05:00  ( info)  Answer list length: 1
2019-11-15 23:48:37.448081-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:48:37.448201-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:48:37.448301-05:00  ( info)  Safe
2019-11-15 23:48:37.448442-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:48:37.448532-05:00  ( info)  Safe
2019-11-15 23:48:37.448703-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:48:37.448794-05:00  ( info)  Safe
2019-11-15 23:48:37.448928-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:48:37.449352-05:00  ( info)  Safe
2019-11-15 23:48:37.449512-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:48:37.449774-05:00  ( info)  Safe
2019-11-15 23:48:37.449926-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:48:37.450028-05:00  ( info)  Safe
2019-11-15 23:48:37.450209-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:48:37.450310-05:00  ( info)  Safe
2019-11-15 23:48:37.450314-05:00  ( info)  verifying proves postcondition
2019-11-15 23:48:38.566044-05:00  ( info)  postcondition proven
2019-11-15 23:49:17.944229-05:00  ( info)  
2019-11-15 23:49:17.944645-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:49:17.945035-05:00  ( info)  Answer list length: 2
2019-11-15 23:49:17.945359-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:49:17.945605-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:17.946339-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:49:17.946347-05:00  ( info)  Answer list length: 1
2019-11-15 23:49:17.946518-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:49:17.946657-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:17.946761-05:00  ( info)  Safe
2019-11-15 23:49:17.946925-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:17.947127-05:00  ( info)  Safe
2019-11-15 23:49:17.947354-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:17.947494-05:00  ( info)  Safe
2019-11-15 23:49:17.947664-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:17.948145-05:00  ( info)  Safe
2019-11-15 23:49:17.948326-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:49:17.948601-05:00  ( info)  Safe
2019-11-15 23:49:17.948780-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:49:17.948882-05:00  ( info)  Safe
2019-11-15 23:49:17.949107-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:49:17.949210-05:00  ( info)  Safe
2019-11-15 23:49:17.949214-05:00  ( info)  verifying proves postcondition
2019-11-15 23:49:17.983960-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:49:17.983990-05:00  ( info)  testbed
2019-11-15 23:49:17.984016-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:49:18.018483-05:00  ( info)  Answer list length: 2
2019-11-15 23:49:18.018732-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:49:18.018855-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:18.018955-05:00  ( info)  Safe
2019-11-15 23:49:18.019256-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:18.019339-05:00  ( info)  Safe
2019-11-15 23:49:18.019480-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:18.019580-05:00  ( info)  Safe
2019-11-15 23:49:18.019719-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:18.019861-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:49:18.019869-05:00  ( info)  Answer list length: 1
2019-11-15 23:49:18.019992-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:49:18.020104-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:18.020208-05:00  ( info)  Safe
2019-11-15 23:49:18.020390-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:18.020493-05:00  ( info)  Safe
2019-11-15 23:49:18.020694-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:18.020781-05:00  ( info)  Safe
2019-11-15 23:49:18.020968-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:18.021904-05:00  ( info)  Safe
2019-11-15 23:49:18.022078-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:49:18.022649-05:00  ( info)  Safe
2019-11-15 23:49:18.022797-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:49:18.022959-05:00  ( info)  Safe
2019-11-15 23:49:18.023110-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:49:18.023320-05:00  ( info)  Safe
2019-11-15 23:49:18.023338-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:49:18.023374-05:00  ( info)  testbed
2019-11-15 23:49:18.023400-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:49:18.106176-05:00  ( info)  Answer list length: 2
2019-11-15 23:49:18.106435-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:49:18.106551-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:18.106661-05:00  ( info)  Safe
2019-11-15 23:49:18.106808-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:18.106890-05:00  ( info)  Safe
2019-11-15 23:49:18.107028-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:18.107126-05:00  ( info)  Safe
2019-11-15 23:49:18.107259-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:18.109935-05:00  ( info)  Safe
2019-11-15 23:49:18.110093-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:49:18.111736-05:00  ( info)  Safe
2019-11-15 23:49:18.111908-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:49:18.112134-05:00  ( info)  Safe
2019-11-15 23:49:18.112289-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:49:18.112524-05:00  ( info)  Safe
2019-11-15 23:49:18.112526-05:00  ( info)  verifying proves postcondition
2019-11-15 23:49:20.213876-05:00  ( info)  postcondition proven
2019-11-15 23:49:20.214051-05:00  ( info)  verifying: []
2019-11-15 23:49:20.214164-05:00  ( info)  Safe
2019-11-15 23:49:20.214361-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:20.214446-05:00  ( info)  Safe
2019-11-15 23:49:20.214587-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:20.214695-05:00  ( info)  Safe
2019-11-15 23:49:20.214834-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:27.334082-05:00  ( info)  Safe
2019-11-15 23:49:27.334313-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:49:31.795597-05:00  ( info)  Safe
2019-11-15 23:49:31.795791-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:49:31.875333-05:00  ( info)  Safe
2019-11-15 23:49:31.875540-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:49:31.938033-05:00  ( info)  Safe
2019-11-15 23:49:53.689496-05:00  ( info)  
2019-11-15 23:49:53.689924-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:49:53.690345-05:00  ( info)  Answer list length: 2
2019-11-15 23:49:53.690664-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:49:53.690921-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:53.691611-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:49:53.691617-05:00  ( info)  Answer list length: 1
2019-11-15 23:49:53.691770-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:49:53.691903-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:53.691994-05:00  ( info)  Safe
2019-11-15 23:49:53.692140-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:53.692257-05:00  ( info)  Safe
2019-11-15 23:49:53.692415-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:53.692507-05:00  ( info)  Safe
2019-11-15 23:49:53.692644-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:53.693064-05:00  ( info)  Safe
2019-11-15 23:49:53.693238-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:49:53.693455-05:00  ( info)  Safe
2019-11-15 23:49:53.693614-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:49:53.693768-05:00  ( info)  Safe
2019-11-15 23:49:53.693931-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:49:53.694033-05:00  ( info)  Safe
2019-11-15 23:49:53.694038-05:00  ( info)  verifying proves postcondition
2019-11-15 23:49:53.738718-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:49:53.738747-05:00  ( info)  testbed
2019-11-15 23:49:53.738772-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:49:53.773075-05:00  ( info)  Answer list length: 2
2019-11-15 23:49:53.773260-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:49:53.773381-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:53.773528-05:00  ( info)  Safe
2019-11-15 23:49:53.773673-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:53.773756-05:00  ( info)  Safe
2019-11-15 23:49:53.773960-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:53.774048-05:00  ( info)  Safe
2019-11-15 23:49:53.774216-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:53.774338-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:49:53.774346-05:00  ( info)  Answer list length: 1
2019-11-15 23:49:53.774470-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:49:53.774606-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:53.774688-05:00  ( info)  Safe
2019-11-15 23:49:53.774845-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:53.774928-05:00  ( info)  Safe
2019-11-15 23:49:53.775069-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:53.775169-05:00  ( info)  Safe
2019-11-15 23:49:53.775298-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:53.776095-05:00  ( info)  Safe
2019-11-15 23:49:53.776244-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:49:53.776755-05:00  ( info)  Safe
2019-11-15 23:49:53.776899-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:49:53.777021-05:00  ( info)  Safe
2019-11-15 23:49:53.777191-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:49:53.777310-05:00  ( info)  Safe
2019-11-15 23:49:53.777328-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:49:53.777362-05:00  ( info)  testbed
2019-11-15 23:49:53.777388-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:49:53.862055-05:00  ( info)  Answer list length: 2
2019-11-15 23:49:53.862247-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:49:53.862368-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:49:53.862517-05:00  ( info)  Safe
2019-11-15 23:49:53.862653-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:53.862762-05:00  ( info)  Safe
2019-11-15 23:49:53.862907-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:53.862995-05:00  ( info)  Safe
2019-11-15 23:49:53.863162-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:49:53.866208-05:00  ( info)  Safe
2019-11-15 23:49:53.866372-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:49:53.868114-05:00  ( info)  Safe
2019-11-15 23:49:53.868263-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:49:53.868531-05:00  ( info)  Safe
2019-11-15 23:49:53.868778-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:49:53.869106-05:00  ( info)  Safe
2019-11-15 23:49:53.869109-05:00  ( info)  verifying proves postcondition
2019-11-15 23:49:57.177654-05:00  ( info)  postcondition proven
2019-11-15 23:49:57.177820-05:00  ( info)  verifying: []
2019-11-15 23:49:57.177934-05:00  ( info)  Safe
2019-11-15 23:49:57.178097-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:49:57.178182-05:00  ( info)  Safe
2019-11-15 23:49:57.178326-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:49:57.178433-05:00  ( info)  Safe
2019-11-15 23:49:57.178564-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:50:04.370575-05:00  ( info)  Safe
2019-11-15 23:50:04.370825-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:50:08.898347-05:00  ( info)  Safe
2019-11-15 23:50:08.898538-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:50:08.978116-05:00  ( info)  Safe
2019-11-15 23:50:08.978325-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:50:09.045641-05:00  ( info)  Safe
2019-11-15 23:50:16.899871-05:00  ( info)  
2019-11-15 23:50:16.900330-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:50:16.900776-05:00  ( info)  Answer list length: 2
2019-11-15 23:50:16.901085-05:00  ( info)  Candidate invariant: fun (x:list) -> False
2019-11-15 23:50:16.901331-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:50:16.902001-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:50:16.902007-05:00  ( info)  Answer list length: 1
2019-11-15 23:50:16.902153-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:50:16.902284-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:50:16.902370-05:00  ( info)  Safe
2019-11-15 23:50:16.902509-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:50:16.902625-05:00  ( info)  Safe
2019-11-15 23:50:16.902777-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:50:16.902867-05:00  ( info)  Safe
2019-11-15 23:50:16.902999-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:50:16.903407-05:00  ( info)  Safe
2019-11-15 23:50:16.903573-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:50:16.903785-05:00  ( info)  Safe
2019-11-15 23:50:16.903951-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:50:16.904094-05:00  ( info)  Safe
2019-11-15 23:50:16.904248-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:50:16.904347-05:00  ( info)  Safe
2019-11-15 23:50:16.904351-05:00  ( info)  verifying proves postcondition
2019-11-15 23:50:16.949588-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))""(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:50:16.949616-05:00  ( info)  testbed
2019-11-15 23:50:16.949642-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Cons",
       (Value.Tuple
          [(Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Cons",
               (Value.Tuple
                  [(Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Nil", (Value.Tuple [])))])
               ))
            ])
       ))
    ];
  pos_tests = [(Value.Ctor ("Nil", (Value.Tuple [])))] }
2019-11-15 23:50:16.984962-05:00  ( info)  Answer list length: 2
2019-11-15 23:50:16.985145-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_lte (size l1) (size empty)
2019-11-15 23:50:16.985267-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:50:16.985414-05:00  ( info)  Safe
2019-11-15 23:50:16.985558-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:50:16.985641-05:00  ( info)  Safe
2019-11-15 23:50:16.985862-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:50:16.985950-05:00  ( info)  Safe
2019-11-15 23:50:16.986122-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:50:16.986246-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Nil\", (Value.Tuple [])))")
2019-11-15 23:50:16.986254-05:00  ( info)  Answer list length: 1
2019-11-15 23:50:16.986378-05:00  ( info)  Candidate invariant: fun (x:list) -> True
2019-11-15 23:50:16.986519-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:50:16.986601-05:00  ( info)  Safe
2019-11-15 23:50:16.986758-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:50:16.986841-05:00  ( info)  Safe
2019-11-15 23:50:16.986982-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:50:16.987088-05:00  ( info)  Safe
2019-11-15 23:50:16.987217-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:50:16.988019-05:00  ( info)  Safe
2019-11-15 23:50:16.988167-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:50:16.988692-05:00  ( info)  Safe
2019-11-15 23:50:16.988838-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:50:16.988959-05:00  ( info)  Safe
2019-11-15 23:50:16.989128-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:50:16.989248-05:00  ( info)  Safe
2019-11-15 23:50:16.989266-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Cons\",\n   (Value.Tuple\n      [(Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Cons\",\n           (Value.Tuple\n              [(Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Nil\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:50:16.989302-05:00  ( info)  testbed
2019-11-15 23:50:16.989328-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Cons",
              (Value.Tuple
                 [(Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Nil", (Value.Tuple [])))])
              ))
           ])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Cons",
      (Value.Tuple
         [(Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Nil", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Nil", (Value.Tuple [])))]
  }
2019-11-15 23:50:17.075025-05:00  ( info)  Answer list length: 2
2019-11-15 23:50:17.075222-05:00  ( info)  Candidate invariant: fun (l1:list) -> nat_eq (size (union l1 empty)) (size l1)
2019-11-15 23:50:17.075342-05:00  ( info)  Checking boundary for:[]
2019-11-15 23:50:17.075496-05:00  ( info)  Safe
2019-11-15 23:50:17.075633-05:00  ( info)  Checking boundary for:fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:50:17.075742-05:00  ( info)  Safe
2019-11-15 23:50:17.075888-05:00  ( info)  Checking boundary for:fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:50:17.075975-05:00  ( info)  Safe
2019-11-15 23:50:17.076149-05:00  ( info)  Checking boundary for:fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:50:17.079206-05:00  ( info)  Safe
2019-11-15 23:50:17.079367-05:00  ( info)  Checking boundary for:fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:50:17.081087-05:00  ( info)  Safe
2019-11-15 23:50:17.081232-05:00  ( info)  Checking boundary for:fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:50:17.081446-05:00  ( info)  Safe
2019-11-15 23:50:17.081615-05:00  ( info)  Checking boundary for:fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:50:17.081837-05:00  ( info)  Safe
2019-11-15 23:50:17.081839-05:00  ( info)  verifying proves postcondition
2019-11-15 23:50:20.460151-05:00  ( info)  postcondition proven
2019-11-15 23:50:20.460318-05:00  ( info)  verifying: []
2019-11-15 23:50:20.460433-05:00  ( info)  Safe
2019-11-15 23:50:20.460597-05:00  ( info)  verifying: fix size (l:list) : nat = match l with
                            | Nil l -> 0
                            | Cons l -> S (size (#2 l))
2019-11-15 23:50:20.460682-05:00  ( info)  Safe
2019-11-15 23:50:20.460824-05:00  ( info)  verifying: fix lookup (l:list) : nat -> bool =
  fun (x:nat) ->
    match l with
      | Nil l -> False
      | Cons l -> (match nat_eq (#1 l) x with
                     | True c -> True
                     | False c -> lookup (#2 l) x)
2019-11-15 23:50:20.460942-05:00  ( info)  Safe
2019-11-15 23:50:20.461081-05:00  ( info)  verifying: fun (l:list) ->
  fun (x:nat) -> match lookup l x with
                   | True b -> l
                   | False b -> Cons (x, l)
2019-11-15 23:50:27.656096-05:00  ( info)  Safe
2019-11-15 23:50:27.656323-05:00  ( info)  verifying: fix delete (l:list) : nat -> list =
  fun (x:nat) ->
    match l with
      | Nil lp -> []
      | Cons lp -> (match nat_eq (#1 lp) x with
                      | True c -> #2 lp
                      | False c -> Cons (#1 lp, delete (#2 lp) x))
2019-11-15 23:50:32.131524-05:00  ( info)  Safe
2019-11-15 23:50:32.131714-05:00  ( info)  verifying: fix union (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> lb
      | Cons la -> union (#2 la) (insert lb (#1 la))
2019-11-15 23:50:32.211776-05:00  ( info)  Safe
2019-11-15 23:50:32.211983-05:00  ( info)  verifying: fix inter (la:list) : list -> list =
  fun (lb:list) ->
    match la with
      | Nil la -> []
      | Cons la -> (match lookup lb (#1 la) with
                      | True r -> Cons (#1 la, inter (#2 la) lb)
                      | False r -> inter (#2 la) lb)
2019-11-15 23:50:32.274779-05:00  ( info)  Safe
2019-11-15 23:52:20.236050-05:00  ( info)  
2019-11-15 23:52:20.236502-05:00  ( info)  DSInfer========================================================================
2019-11-15 23:52:20.237272-05:00  ( info)  Answer list length: 2
2019-11-15 23:52:20.237751-05:00  ( info)  Candidate invariant: fun (x:bst) -> False
2019-11-15 23:52:20.238748-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.238970-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-15 23:52:20.238979-05:00  ( info)  Answer list length: 1
2019-11-15 23:52:20.239203-05:00  ( info)  Candidate invariant: fun (x:bst) -> True
2019-11-15 23:52:20.239448-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.239603-05:00  ( info)  Safe
2019-11-15 23:52:20.239828-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.239992-05:00  ( info)  Safe
2019-11-15 23:52:20.240270-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.240483-05:00  ( info)  Safe
2019-11-15 23:52:20.240812-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.241574-05:00  ( info)  Safe
2019-11-15 23:52:20.241866-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:20.242261-05:00  ( info)  Safe
2019-11-15 23:52:20.242266-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:20.282821-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:20.282861-05:00  ( info)  testbed
2019-11-15 23:52:20.282893-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests = [(Value.Ctor ("Leaf", (Value.Tuple [])))] }
2019-11-15 23:52:20.316996-05:00  ( info)  Answer list length: 2
2019-11-15 23:52:20.317296-05:00  ( info)  Candidate invariant: fun (b1:bst) -> nat_lte (size b1) (size empty)
2019-11-15 23:52:20.317483-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.317762-05:00  ( info)  Safe
2019-11-15 23:52:20.317970-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.318137-05:00  ( info)  Safe
2019-11-15 23:52:20.318406-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.318562-05:00  ( info)  Safe
2019-11-15 23:52:20.318825-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.319102-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-15 23:52:20.319114-05:00  ( info)  Answer list length: 1
2019-11-15 23:52:20.319299-05:00  ( info)  Candidate invariant: fun (x:bst) -> True
2019-11-15 23:52:20.319511-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.319664-05:00  ( info)  Safe
2019-11-15 23:52:20.319943-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.320130-05:00  ( info)  Safe
2019-11-15 23:52:20.320352-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.320616-05:00  ( info)  Safe
2019-11-15 23:52:20.320877-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.322325-05:00  ( info)  Safe
2019-11-15 23:52:20.322611-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:20.323658-05:00  ( info)  Safe
2019-11-15 23:52:20.323684-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:20.323753-05:00  ( info)  testbed
2019-11-15 23:52:20.323795-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:20.409192-05:00  ( info)  Answer list length: 2
2019-11-15 23:52:20.409477-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> True
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:20.410163-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.410377-05:00  ( info)  Safe
2019-11-15 23:52:20.410589-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.410789-05:00  ( info)  Safe
2019-11-15 23:52:20.411002-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.411176-05:00  ( info)  Safe
2019-11-15 23:52:20.411439-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.413995-05:00  ( info)  Safe
2019-11-15 23:52:20.414256-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:20.416208-05:00  ( info)  Safe
2019-11-15 23:52:20.416210-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:20.462840-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:20.463037-05:00  ( info)  testbed
2019-11-15 23:52:20.463085-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:20.507703-05:00  ( info)  Answer list length: 3
2019-11-15 23:52:20.507991-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b3) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:20.508208-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.508380-05:00  ( info)  Safe
2019-11-15 23:52:20.508661-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.508856-05:00  ( info)  Safe
2019-11-15 23:52:20.509077-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.509328-05:00  ( info)  Safe
2019-11-15 23:52:20.509553-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.511264-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:20.511390-05:00  ( info)  Answer list length: 2
2019-11-15 23:52:20.511793-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> True
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:20.511990-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.512205-05:00  ( info)  Safe
2019-11-15 23:52:20.512416-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.512679-05:00  ( info)  Safe
2019-11-15 23:52:20.512923-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.513079-05:00  ( info)  Safe
2019-11-15 23:52:20.513356-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.517517-05:00  ( info)  Safe
2019-11-15 23:52:20.517787-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:20.521260-05:00  ( info)  Safe
2019-11-15 23:52:20.521286-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:20.524115-05:00  ( info)  testbed
2019-11-15 23:52:20.524200-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:20.569918-05:00  ( info)  Answer list length: 3
2019-11-15 23:52:20.570259-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> lookup b1
                                                                 (size b3)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:20.570447-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.570681-05:00  ( info)  Safe
2019-11-15 23:52:20.571051-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.571244-05:00  ( info)  Safe
2019-11-15 23:52:20.571560-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.571743-05:00  ( info)  Safe
2019-11-15 23:52:20.572006-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.572326-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-15 23:52:20.572526-05:00  ( info)  Answer list length: 2
2019-11-15 23:52:20.572817-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> True
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:20.573055-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.573291-05:00  ( info)  Safe
2019-11-15 23:52:20.573576-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.573747-05:00  ( info)  Safe
2019-11-15 23:52:20.573983-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.574174-05:00  ( info)  Safe
2019-11-15 23:52:20.574410-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.577201-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:20.577241-05:00  ( info)  Answer list length: 1
2019-11-15 23:52:20.577468-05:00  ( info)  Candidate invariant: fun (x:bst) -> True
2019-11-15 23:52:20.577698-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.577839-05:00  ( info)  Safe
2019-11-15 23:52:20.578056-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.578231-05:00  ( info)  Safe
2019-11-15 23:52:20.578466-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.578681-05:00  ( info)  Safe
2019-11-15 23:52:20.578902-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.583188-05:00  ( info)  Safe
2019-11-15 23:52:20.583454-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:20.587369-05:00  ( info)  Safe
2019-11-15 23:52:20.587405-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:20.592069-05:00  ( info)  testbed
2019-11-15 23:52:20.592180-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:20.601266-05:00  ( info)  Answer list length: 2
2019-11-15 23:52:20.601554-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> True
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n2
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:20.601753-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.602020-05:00  ( info)  Safe
2019-11-15 23:52:20.602351-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.602566-05:00  ( info)  Safe
2019-11-15 23:52:20.602876-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.603029-05:00  ( info)  Safe
2019-11-15 23:52:20.603268-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.610881-05:00  ( info)  Safe
2019-11-15 23:52:20.611174-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:20.617968-05:00  ( info)  Safe
2019-11-15 23:52:20.617971-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:20.667320-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:20.671214-05:00  ( info)  testbed
2019-11-15 23:52:20.671307-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:20.685159-05:00  ( info)  Answer list length: 3
2019-11-15 23:52:20.685456-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n2
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:20.685669-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:20.685849-05:00  ( info)  Safe
2019-11-15 23:52:20.686068-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:20.686294-05:00  ( info)  Safe
2019-11-15 23:52:20.686513-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:20.686703-05:00  ( info)  Safe
2019-11-15 23:52:20.686930-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:20.697201-05:00  ( info)  Safe
2019-11-15 23:52:20.697511-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:20.705716-05:00  ( info)  Safe
2019-11-15 23:52:20.705719-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:21.433683-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:21.440802-05:00  ( info)  Answer list length: 4
2019-11-15 23:52:21.441074-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b2) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:21.441282-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:21.441488-05:00  ( info)  Safe
2019-11-15 23:52:21.441687-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:21.441866-05:00  ( info)  Safe
2019-11-15 23:52:21.442086-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:21.442277-05:00  ( info)  Safe
2019-11-15 23:52:21.442541-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:21.451949-05:00  ( info)  Safe
2019-11-15 23:52:21.452258-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:21.460164-05:00  ( info)  Safe
2019-11-15 23:52:21.460167-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:21.952930-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:21.953879-05:00  ( info)  testbed
2019-11-15 23:52:21.954009-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:22.453842-05:00  ( info)  Answer list length: 5
2019-11-15 23:52:22.454178-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    lookup
                                                                    (delete
                                                                    b2 n1)
                                                                    (size b4))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:22.454403-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:22.454652-05:00  ( info)  Safe
2019-11-15 23:52:22.454905-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:22.455086-05:00  ( info)  Safe
2019-11-15 23:52:22.455357-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:22.455522-05:00  ( info)  Safe
2019-11-15 23:52:22.455844-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:22.475038-05:00  ( info)  Safe
2019-11-15 23:52:22.475351-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:22.489736-05:00  ( info)  Safe
2019-11-15 23:52:22.489741-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:23.159966-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"O\", (Value.Tuple [])));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ))\n               ])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.182824-05:00  ( info)  Answer list length: 6
2019-11-15 23:52:23.183174-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> lookup b1
                                                              (size
                                                                 (delete b1
                                                                    n1))
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_lte
                                                                 (size
                                                                    (
                                                                    delete b1
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.183390-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.183651-05:00  ( info)  Safe
2019-11-15 23:52:23.183850-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.184028-05:00  ( info)  Safe
2019-11-15 23:52:23.184242-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.184435-05:00  ( info)  Safe
2019-11-15 23:52:23.184675-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.191365-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.193359-05:00  ( info)  Answer list length: 5
2019-11-15 23:52:23.193632-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    lookup
                                                                    (delete
                                                                    b2 n1)
                                                                    (size b4))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.193812-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.194042-05:00  ( info)  Safe
2019-11-15 23:52:23.194240-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.194413-05:00  ( info)  Safe
2019-11-15 23:52:23.194623-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.194801-05:00  ( info)  Safe
2019-11-15 23:52:23.195045-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.215483-05:00  ( info)  Safe
2019-11-15 23:52:23.215793-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:23.233525-05:00  ( info)  Safe
2019-11-15 23:52:23.233564-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"O\", (Value.Tuple [])));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ))\n               ])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.235398-05:00  ( info)  testbed
2019-11-15 23:52:23.235580-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:23.308518-05:00  ( info)  Answer list length: 6
2019-11-15 23:52:23.308814-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> not
                                                              (lookup
                                                                 (delete b1
                                                                    n1)
                                                                 n1)
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_eq
                                                                 (size
                                                                    (
                                                                    delete b1
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.309019-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.309380-05:00  ( info)  Safe
2019-11-15 23:52:23.309583-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.309757-05:00  ( info)  Safe
2019-11-15 23:52:23.309974-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.310346-05:00  ( info)  Safe
2019-11-15 23:52:23.310595-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.311640-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-15 23:52:23.314077-05:00  ( info)  Answer list length: 5
2019-11-15 23:52:23.314324-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    lookup
                                                                    (delete
                                                                    b2 n1)
                                                                    (size b4))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.314524-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.314719-05:00  ( info)  Safe
2019-11-15 23:52:23.314981-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.315155-05:00  ( info)  Safe
2019-11-15 23:52:23.315371-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.315616-05:00  ( info)  Safe
2019-11-15 23:52:23.315860-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.326638-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.327791-05:00  ( info)  Answer list length: 4
2019-11-15 23:52:23.328044-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b2) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.328239-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.328454-05:00  ( info)  Safe
2019-11-15 23:52:23.328674-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.328843-05:00  ( info)  Safe
2019-11-15 23:52:23.329060-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.329275-05:00  ( info)  Safe
2019-11-15 23:52:23.329523-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.346828-05:00  ( info)  Safe
2019-11-15 23:52:23.347171-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:23.363494-05:00  ( info)  Safe
2019-11-15 23:52:23.363532-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.367959-05:00  ( info)  testbed
2019-11-15 23:52:23.368134-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:23.443428-05:00  ( info)  Answer list length: 5
2019-11-15 23:52:23.443751-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (add n2
                                                                    (size b2))
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.443930-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.444134-05:00  ( info)  Safe
2019-11-15 23:52:23.444358-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.444508-05:00  ( info)  Safe
2019-11-15 23:52:23.444752-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.444910-05:00  ( info)  Safe
2019-11-15 23:52:23.445149-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.462747-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.464046-05:00  ( info)  Answer list length: 4
2019-11-15 23:52:23.464331-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b2) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.464506-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.464717-05:00  ( info)  Safe
2019-11-15 23:52:23.464915-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.465111-05:00  ( info)  Safe
2019-11-15 23:52:23.465343-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.465500-05:00  ( info)  Safe
2019-11-15 23:52:23.465735-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.483828-05:00  ( info)  Safe
2019-11-15 23:52:23.484120-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:23.499100-05:00  ( info)  Safe
2019-11-15 23:52:23.499130-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.523082-05:00  ( info)  Answer list length: 5
2019-11-15 23:52:23.523403-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> not
                                                              (lookup
                                                                 (delete b1
                                                                    n1)
                                                                 n1)
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_lte
                                                                 (size
                                                                    (
                                                                    delete b1
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.523589-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.523845-05:00  ( info)  Safe
2019-11-15 23:52:23.524072-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.524225-05:00  ( info)  Safe
2019-11-15 23:52:23.524516-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.524715-05:00  ( info)  Safe
2019-11-15 23:52:23.524949-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.539987-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.541852-05:00  ( info)  Answer list length: 4
2019-11-15 23:52:23.542155-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b2) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.542336-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.542548-05:00  ( info)  Safe
2019-11-15 23:52:23.542750-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.543072-05:00  ( info)  Safe
2019-11-15 23:52:23.543308-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.543465-05:00  ( info)  Safe
2019-11-15 23:52:23.543756-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.565973-05:00  ( info)  Safe
2019-11-15 23:52:23.566283-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:23.584872-05:00  ( info)  Safe
2019-11-15 23:52:23.584905-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:23.586899-05:00  ( info)  testbed
2019-11-15 23:52:23.587116-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:23.681084-05:00  ( info)  Answer list length: 5
2019-11-15 23:52:23.681413-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:23.681614-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:23.681801-05:00  ( info)  Safe
2019-11-15 23:52:23.682019-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:23.682201-05:00  ( info)  Safe
2019-11-15 23:52:23.682413-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:23.682602-05:00  ( info)  Safe
2019-11-15 23:52:23.682822-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:23.709687-05:00  ( info)  Safe
2019-11-15 23:52:23.710008-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:23.732560-05:00  ( info)  Safe
2019-11-15 23:52:23.732567-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:24.730945-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ))\n               ])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:24.761547-05:00  ( info)  Answer list length: 6
2019-11-15 23:52:24.761837-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> not
                                                              (lookup
                                                                 (delete b1
                                                                    n1)
                                                                 n1)
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_lte
                                                                 (size
                                                                    (
                                                                    insert b2
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:24.762188-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:24.762440-05:00  ( info)  Safe
2019-11-15 23:52:24.762650-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:24.762846-05:00  ( info)  Safe
2019-11-15 23:52:24.763097-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:24.763280-05:00  ( info)  Safe
2019-11-15 23:52:24.763555-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:24.807142-05:00  ( info)  Safe
2019-11-15 23:52:24.807468-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:24.854747-05:00  ( info)  Safe
2019-11-15 23:52:24.854756-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:25.359163-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:25.362724-05:00  ( info)  testbed
2019-11-15 23:52:25.363007-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:26.041200-05:00  ( info)  Answer list length: 7
2019-11-15 23:52:26.041498-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> lookup b1
                                                                 (add
                                                                    (
                                                                    size b2)
                                                                    (
                                                                    min_val
                                                                    b1))
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:26.041676-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:26.041895-05:00  ( info)  Safe
2019-11-15 23:52:26.042151-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:26.042301-05:00  ( info)  Safe
2019-11-15 23:52:26.042542-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:26.042698-05:00  ( info)  Safe
2019-11-15 23:52:26.042949-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:26.051372-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:26.056169-05:00  ( info)  Answer list length: 6
2019-11-15 23:52:26.056428-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> not
                                                              (lookup
                                                                 (delete b1
                                                                    n1)
                                                                 n1)
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_lte
                                                                 (size
                                                                    (
                                                                    insert b2
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:26.056608-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:26.056859-05:00  ( info)  Safe
2019-11-15 23:52:26.057155-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:26.057306-05:00  ( info)  Safe
2019-11-15 23:52:26.057545-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:26.057838-05:00  ( info)  Safe
2019-11-15 23:52:26.058066-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:26.115328-05:00  ( info)  Safe
2019-11-15 23:52:26.115653-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:26.162130-05:00  ( info)  Safe
2019-11-15 23:52:26.162167-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:26.171664-05:00  ( info)  testbed
2019-11-15 23:52:26.171966-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:26.487316-05:00  ( info)  Answer list length: 7
2019-11-15 23:52:26.487630-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b2
                                                                    n1))
                                                                 (f1 b2)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:26.487811-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:26.488057-05:00  ( info)  Safe
2019-11-15 23:52:26.488289-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:26.488439-05:00  ( info)  Safe
2019-11-15 23:52:26.488725-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:26.488921-05:00  ( info)  Safe
2019-11-15 23:52:26.489153-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:26.519188-05:00  ( info)  Safe
2019-11-15 23:52:26.519561-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:26.551956-05:00  ( info)  Safe
2019-11-15 23:52:26.551965-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:27.247242-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:27.286794-05:00  ( info)  Answer list length: 8
2019-11-15 23:52:27.287165-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:27.287369-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:27.287594-05:00  ( info)  Safe
2019-11-15 23:52:27.288072-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:27.288227-05:00  ( info)  Safe
2019-11-15 23:52:27.288471-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:27.288859-05:00  ( info)  Safe
2019-11-15 23:52:27.289087-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:27.331286-05:00  ( info)  Safe
2019-11-15 23:52:27.331617-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:27.365613-05:00  ( info)  Safe
2019-11-15 23:52:27.365621-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:28.123971-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:28.130119-05:00  ( info)  testbed
2019-11-15 23:52:28.130441-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:28.503259-05:00  ( info)  Answer list length: 9
2019-11-15 23:52:28.503569-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (size
                                                                    (delete
                                                                    b1
                                                                    (size
                                                                    empty)))
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:28.503756-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:28.504084-05:00  ( info)  Safe
2019-11-15 23:52:28.504287-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:28.504443-05:00  ( info)  Safe
2019-11-15 23:52:28.504689-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:28.504846-05:00  ( info)  Safe
2019-11-15 23:52:28.505117-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:28.523394-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:28.530517-05:00  ( info)  Answer list length: 8
2019-11-15 23:52:28.530804-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:28.530980-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:28.531206-05:00  ( info)  Safe
2019-11-15 23:52:28.531455-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:28.531606-05:00  ( info)  Safe
2019-11-15 23:52:28.531854-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:28.532011-05:00  ( info)  Safe
2019-11-15 23:52:28.532252-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:28.571752-05:00  ( info)  Safe
2019-11-15 23:52:28.572130-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:28.607727-05:00  ( info)  Safe
2019-11-15 23:52:28.607770-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:28.645618-05:00  ( info)  Answer list length: 9
2019-11-15 23:52:28.645952-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b2
                                                                    n1))
                                                                 (f1 b2)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    not
                                                                    (lookup
                                                                    (delete
                                                                    b1 n1) n1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:28.646130-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:28.646354-05:00  ( info)  Safe
2019-11-15 23:52:28.646573-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:28.646724-05:00  ( info)  Safe
2019-11-15 23:52:28.646961-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:28.647152-05:00  ( info)  Safe
2019-11-15 23:52:28.647417-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:28.733137-05:00  ( info)  Safe
2019-11-15 23:52:28.733628-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:28.796007-05:00  ( info)  Safe
2019-11-15 23:52:28.796016-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:29.899473-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:29.906921-05:00  ( info)  testbed
2019-11-15 23:52:29.907303-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:30.520932-05:00  ( info)  Answer list length: 10
2019-11-15 23:52:30.521227-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b3)
                                                                 (min_val
                                                                    (
                                                                    delete b3
                                                                    n1))
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (add
                                                                    (size b2)
                                                                    (min_val
                                                                    b1)) n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:30.521442-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:30.521706-05:00  ( info)  Safe
2019-11-15 23:52:30.521906-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:30.522085-05:00  ( info)  Safe
2019-11-15 23:52:30.522304-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:30.522504-05:00  ( info)  Safe
2019-11-15 23:52:30.522760-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:30.539721-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"S\",\n                           (Value.Ctor (\"S\",\n                              (Value.Ctor (\"O\", (Value.Tuple [])))))\n                           ));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:30.550522-05:00  ( info)  Answer list length: 9
2019-11-15 23:52:30.550822-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b2
                                                                    n1))
                                                                 (f1 b2)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    not
                                                                    (lookup
                                                                    (delete
                                                                    b1 n1) n1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:30.551000-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:30.551242-05:00  ( info)  Safe
2019-11-15 23:52:30.551483-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:30.551636-05:00  ( info)  Safe
2019-11-15 23:52:30.551868-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:30.552044-05:00  ( info)  Safe
2019-11-15 23:52:30.552267-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:30.651249-05:00  ( info)  Safe
2019-11-15 23:52:30.651583-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:30.736260-05:00  ( info)  Safe
2019-11-15 23:52:30.736309-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:30.749845-05:00  ( info)  testbed
2019-11-15 23:52:30.750276-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:31.465498-05:00  ( info)  Answer list length: 10
2019-11-15 23:52:31.465816-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b3
                                                                    n1))
                                                                 (f1 b3)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (add
                                                                    (size b2)
                                                                    (min_val
                                                                    b1)) n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:31.466001-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:31.466250-05:00  ( info)  Safe
2019-11-15 23:52:31.466464-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:31.466670-05:00  ( info)  Safe
2019-11-15 23:52:31.466927-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:31.467091-05:00  ( info)  Safe
2019-11-15 23:52:31.467353-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:31.524908-05:00  ( info)  Safe
2019-11-15 23:52:31.525235-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:31.567512-05:00  ( info)  Safe
2019-11-15 23:52:31.567523-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:32.422842-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:32.452367-05:00  ( info)  testbed
2019-11-15 23:52:32.452806-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Node",
                    (Value.Tuple
                       [(Value.Ctor ("Leaf", (Value.Tuple [])));
                         (Value.Ctor ("O", (Value.Tuple [])));
                         (Value.Ctor ("Leaf", (Value.Tuple [])))])
                    ));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:33.217220-05:00  ( info)  Answer list length: 11
2019-11-15 23:52:33.217521-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b3
                                                                    n1))
                                                                 (f1 b3)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (size
                                                                    (insert
                                                                    b2
                                                                    (size b4)))
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:33.217732-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:33.217992-05:00  ( info)  Safe
2019-11-15 23:52:33.218193-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:33.218367-05:00  ( info)  Safe
2019-11-15 23:52:33.218586-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:33.218790-05:00  ( info)  Safe
2019-11-15 23:52:33.219047-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:33.285575-05:00  ( info)  Safe
2019-11-15 23:52:33.285953-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:33.347927-05:00  ( info)  Safe
2019-11-15 23:52:33.347936-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:34.087087-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:52:34.126365-05:00  ( info)  testbed
2019-11-15 23:52:34.126836-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:36.252166-05:00  ( info)  Answer list length: 12
2019-11-15 23:52:36.252510-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_lt n3
                                                                    n1)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:36.252734-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:36.252931-05:00  ( info)  Safe
2019-11-15 23:52:36.253353-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:36.253536-05:00  ( info)  Safe
2019-11-15 23:52:36.253751-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:36.254009-05:00  ( info)  Safe
2019-11-15 23:52:36.254234-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:36.321590-05:00  ( info)  Safe
2019-11-15 23:52:36.321925-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:36.367987-05:00  ( info)  Safe
2019-11-15 23:52:36.367997-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:37.308004-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:37.450378-05:00  ( info)  testbed
2019-11-15 23:52:37.450867-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:39.004779-05:00  ( info)  Answer list length: 13
2019-11-15 23:52:39.005185-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_lt
                                                                    (size b2)
                                                                    n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:39.005366-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:39.005603-05:00  ( info)  Safe
2019-11-15 23:52:39.005870-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:39.006023-05:00  ( info)  Safe
2019-11-15 23:52:39.006265-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:39.006451-05:00  ( info)  Safe
2019-11-15 23:52:39.006674-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:39.063507-05:00  ( info)  Safe
2019-11-15 23:52:39.063840-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:39.107235-05:00  ( info)  Safe
2019-11-15 23:52:39.107243-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:39.956922-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:40.124360-05:00  ( info)  testbed
2019-11-15 23:52:40.124860-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:52:41.694644-05:00  ( info)  Answer list length: 14
2019-11-15 23:52:41.694950-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:52:41.695162-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:52:41.695427-05:00  ( info)  Safe
2019-11-15 23:52:41.695627-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:41.695793-05:00  ( info)  Safe
2019-11-15 23:52:41.696034-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:41.696215-05:00  ( info)  Safe
2019-11-15 23:52:41.696467-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:41.753169-05:00  ( info)  Safe
2019-11-15 23:52:41.753598-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:41.806198-05:00  ( info)  Safe
2019-11-15 23:52:41.806206-05:00  ( info)  verifying proves postcondition
2019-11-15 23:52:48.930591-05:00  ( info)  postcondition proven
2019-11-15 23:52:48.930832-05:00  ( info)  verifying: Leaf
2019-11-15 23:52:48.931061-05:00  ( info)  Safe
2019-11-15 23:52:48.931320-05:00  ( info)  verifying: fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:52:48.931483-05:00  ( info)  Safe
2019-11-15 23:52:48.931756-05:00  ( info)  verifying: fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:52:48.932034-05:00  ( info)  Safe
2019-11-15 23:52:48.932289-05:00  ( info)  verifying: fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:52:53.857653-05:00  ( info)  Safe
2019-11-15 23:52:53.857981-05:00  ( info)  verifying: fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:52:58.303179-05:00  ( info)  Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:52:58.459446-05:00  ( info)  testbed
2019-11-15 23:52:58.460003-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:53:00.327205-05:00  ( info)  Answer list length: 15
2019-11-15 23:53:00.327515-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_eq
                                                                    (add n2
                                                                    n1)
                                                                    (size b1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:00.327734-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:00.328012-05:00  ( info)  Safe
2019-11-15 23:53:00.328213-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:00.328382-05:00  ( info)  Safe
2019-11-15 23:53:00.328640-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:00.328799-05:00  ( info)  Safe
2019-11-15 23:53:00.329053-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:00.351361-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\",\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ))\n                      ))\n                   ));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:53:00.376137-05:00  ( info)  Answer list length: 14
2019-11-15 23:53:00.376452-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:00.376630-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:00.376864-05:00  ( info)  Safe
2019-11-15 23:53:00.377161-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:00.377313-05:00  ( info)  Safe
2019-11-15 23:53:00.377552-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:00.377748-05:00  ( info)  Safe
2019-11-15 23:53:00.377981-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:00.439084-05:00  ( info)  Safe
2019-11-15 23:53:00.439427-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:53:00.486379-05:00  ( info)  Safe
2019-11-15 23:53:00.486433-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:53:00.515903-05:00  ( info)  testbed
2019-11-15 23:53:00.516517-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("O", (Value.Tuple [])))))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:53:04.547921-05:00  ( info)  Answer list length: 15
2019-11-15 23:53:04.548260-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_lte
                                                                    (size b1)
                                                                    (add n2
                                                                    n1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> nat_lte n1
                                                                    S (
                                                                    size b1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:04.548443-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:04.548685-05:00  ( info)  Safe
2019-11-15 23:53:04.549052-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:04.549239-05:00  ( info)  Safe
2019-11-15 23:53:04.549463-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:04.549787-05:00  ( info)  Safe
2019-11-15 23:53:04.550015-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:04.550734-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-15 23:53:04.580046-05:00  ( info)  Answer list length: 14
2019-11-15 23:53:04.580398-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:04.580581-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:04.580880-05:00  ( info)  Safe
2019-11-15 23:53:04.581108-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:04.581262-05:00  ( info)  Safe
2019-11-15 23:53:04.581539-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:04.581737-05:00  ( info)  Safe
2019-11-15 23:53:04.581970-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:04.659128-05:00  ( info)  Safe
2019-11-15 23:53:04.659466-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:53:04.711006-05:00  ( info)  Safe
2019-11-15 23:53:04.711257-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:53:04.753526-05:00  ( info)  testbed
2019-11-15 23:53:04.754191-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:53:06.598084-05:00  ( info)  Answer list length: 15
2019-11-15 23:53:06.598432-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_lte
                                                                    (size b1)
                                                                    (add n2
                                                                    n1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:06.598636-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:06.598876-05:00  ( info)  Safe
2019-11-15 23:53:06.599084-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:06.599279-05:00  ( info)  Safe
2019-11-15 23:53:06.599490-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:06.599683-05:00  ( info)  Safe
2019-11-15 23:53:06.599942-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:06.658210-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"S\",\n                           (Value.Ctor (\"S\",\n                              (Value.Ctor (\"S\",\n                                 (Value.Ctor (\"O\", (Value.Tuple [])))))\n                              ))\n                           ));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:53:06.685323-05:00  ( info)  Answer list length: 14
2019-11-15 23:53:06.685664-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:06.685843-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:06.686083-05:00  ( info)  Safe
2019-11-15 23:53:06.686307-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:06.686461-05:00  ( info)  Safe
2019-11-15 23:53:06.686690-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:06.686900-05:00  ( info)  Safe
2019-11-15 23:53:06.687126-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:06.752288-05:00  ( info)  Safe
2019-11-15 23:53:06.752628-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:53:06.802382-05:00  ( info)  Safe
2019-11-15 23:53:06.802434-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:53:06.835174-05:00  ( info)  testbed
2019-11-15 23:53:06.835868-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("S",
                                    (Value.Ctor ("O", (Value.Tuple [])))))
                                 ))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:53:46.089117-05:00  ( info)  Answer list length: 15
2019-11-15 23:53:46.089453-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    False
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    lookup b1
                                                                    (size
                                                                    (delete
                                                                    b1 n3)))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    (min_val
                                                                    (insert
                                                                    b3 n3))
                                                                    n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:46.089670-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:46.090161-05:00  ( info)  Safe
2019-11-15 23:53:46.090395-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:46.090593-05:00  ( info)  Safe
2019-11-15 23:53:46.090824-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:46.091069-05:00  ( info)  Safe
2019-11-15 23:53:46.091334-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:46.096695-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\",\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ))\n                      ))\n                   ));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:53:46.124456-05:00  ( info)  Answer list length: 14
2019-11-15 23:53:46.124782-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:46.124961-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:46.125186-05:00  ( info)  Safe
2019-11-15 23:53:46.125430-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:46.125621-05:00  ( info)  Safe
2019-11-15 23:53:46.125838-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:46.126060-05:00  ( info)  Safe
2019-11-15 23:53:46.126301-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:46.202269-05:00  ( info)  Safe
2019-11-15 23:53:46.202624-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:53:46.269957-05:00  ( info)  Safe
2019-11-15 23:53:46.270023-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:53:51.800880-05:00  ( info)  Answer list length: 15
2019-11-15 23:53:51.801223-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n1 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    lookup b3
                                                                    (size b1))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    (min_val
                                                                    (insert
                                                                    b3 n3))
                                                                    n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:51.801440-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:51.801987-05:00  ( info)  Safe
2019-11-15 23:53:51.802191-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:51.802360-05:00  ( info)  Safe
2019-11-15 23:53:51.802664-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:51.802824-05:00  ( info)  Safe
2019-11-15 23:53:51.803074-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:51.819314-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\",\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ))\n                      ))\n                   ));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:53:51.854937-05:00  ( info)  Answer list length: 14
2019-11-15 23:53:51.855264-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:53:51.855444-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:53:51.855756-05:00  ( info)  Safe
2019-11-15 23:53:51.855984-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:53:51.856137-05:00  ( info)  Safe
2019-11-15 23:53:51.856468-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:53:51.856663-05:00  ( info)  Safe
2019-11-15 23:53:51.856894-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:53:51.963254-05:00  ( info)  Safe
2019-11-15 23:53:51.963585-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:53:52.047337-05:00  ( info)  Safe
2019-11-15 23:53:52.047392-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:53:52.071502-05:00  ( info)  testbed
2019-11-15 23:53:52.072670-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("O", (Value.Tuple [])))))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:54:09.336783-05:00  ( info)  Answer list length: 15
2019-11-15 23:54:09.337181-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n1 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lte
                                                                    (add n1
                                                                    n1) n2)
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    (min_val
                                                                    (insert
                                                                    b3 n3))
                                                                    n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:54:09.337365-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:54:09.337644-05:00  ( info)  Safe
2019-11-15 23:54:09.338198-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:54:09.338373-05:00  ( info)  Safe
2019-11-15 23:54:09.338613-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:54:09.338874-05:00  ( info)  Safe
2019-11-15 23:54:09.339102-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:54:09.398516-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\",\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ))\n                      ))\n                   ));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:54:09.444081-05:00  ( info)  Answer list length: 14
2019-11-15 23:54:09.444391-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:54:09.444607-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:54:09.445127-05:00  ( info)  Safe
2019-11-15 23:54:09.445330-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:54:09.445511-05:00  ( info)  Safe
2019-11-15 23:54:09.445733-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:54:09.446043-05:00  ( info)  Safe
2019-11-15 23:54:09.446300-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:54:09.553339-05:00  ( info)  Safe
2019-11-15 23:54:09.553664-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:54:09.630377-05:00  ( info)  Safe
2019-11-15 23:54:09.630430-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:54:09.861185-05:00  ( info)  testbed
2019-11-15 23:54:09.861930-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("O", (Value.Tuple [])))))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:54:14.603995-05:00  ( info)  Answer list length: 15
2019-11-15 23:54:14.604336-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    (min_val
                                                                    (insert
                                                                    b3 n3))
                                                                    n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:54:14.604519-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:54:14.604772-05:00  ( info)  Safe
2019-11-15 23:54:14.604990-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:54:14.605145-05:00  ( info)  Safe
2019-11-15 23:54:14.605383-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:54:14.605595-05:00  ( info)  Safe
2019-11-15 23:54:14.605820-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:54:14.717999-05:00  ( info)  Safe
2019-11-15 23:54:14.718354-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:54:14.799415-05:00  ( info)  Safe
2019-11-15 23:54:14.799425-05:00  ( info)  verifying proves postcondition
2019-11-15 23:54:22.298369-05:00  ( info)  postcondition proven
2019-11-15 23:54:22.298855-05:00  ( info)  verifying: Leaf
2019-11-15 23:54:22.299367-05:00  ( info)  Safe
2019-11-15 23:54:22.300066-05:00  ( info)  verifying: fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:54:22.300365-05:00  ( info)  Safe
2019-11-15 23:54:22.300729-05:00  ( info)  verifying: fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:54:22.300917-05:00  ( info)  Safe
2019-11-15 23:54:22.301301-05:00  ( info)  verifying: fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:54:28.664240-05:00  ( info)  Safe
2019-11-15 23:54:28.664576-05:00  ( info)  verifying: fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:54:34.084089-05:00  ( info)  Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"O\", (Value.Tuple [])));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
2019-11-15 23:54:34.404130-05:00  ( info)  testbed
2019-11-15 23:54:34.404859-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("O", (Value.Tuple [])))))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:54:39.439215-05:00  ( info)  Answer list length: 16
2019-11-15 23:54:39.439551-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n3 n1 n2)
                                                                    (f1 b3))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:54:39.439929-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:54:39.440158-05:00  ( info)  Safe
2019-11-15 23:54:39.440367-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:54:39.440585-05:00  ( info)  Safe
2019-11-15 23:54:39.440875-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:54:39.441054-05:00  ( info)  Safe
2019-11-15 23:54:39.441333-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:54:39.556378-05:00  ( info)  Safe
2019-11-15 23:54:39.556697-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:54:39.636224-05:00  ( info)  Safe
2019-11-15 23:54:39.636232-05:00  ( info)  verifying proves postcondition
2019-11-15 23:54:47.810670-05:00  ( info)  postcondition proven
2019-11-15 23:54:47.811118-05:00  ( info)  verifying: Leaf
2019-11-15 23:54:47.811968-05:00  ( info)  Safe
2019-11-15 23:54:47.812335-05:00  ( info)  verifying: fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:54:47.812535-05:00  ( info)  Safe
2019-11-15 23:54:47.813006-05:00  ( info)  verifying: fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:54:47.813258-05:00  ( info)  Safe
2019-11-15 23:54:47.813875-05:00  ( info)  verifying: fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:54:56.099225-05:00  ( info)  Safe
2019-11-15 23:54:56.099593-05:00  ( info)  verifying: fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:55:01.194526-05:00  ( info)  Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:55:01.510370-05:00  ( info)  testbed
2019-11-15 23:55:01.511252-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("O", (Value.Tuple [])))))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:55:31.239568-05:00  ( info)  Answer list length: 17
2019-11-15 23:55:31.239974-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    False
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n4:unit) ->
                                                                    lookup b1
                                                                    (size
                                                                    (delete
                                                                    b1 n4)))
                                                                    N_fresh_var_2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:55:31.240156-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:55:31.240519-05:00  ( info)  Safe
2019-11-15 23:55:31.240734-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:55:31.240890-05:00  ( info)  Safe
2019-11-15 23:55:31.241121-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:55:31.241317-05:00  ( info)  Safe
2019-11-15 23:55:31.241540-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:55:31.278860-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\",\n                      (Value.Ctor (\"S\",\n                         (Value.Ctor (\"S\",\n                            (Value.Ctor (\"O\", (Value.Tuple [])))))\n                         ))\n                      ))\n                   ));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-15 23:55:31.318415-05:00  ( info)  Answer list length: 16
2019-11-15 23:55:31.318741-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n3 n1 n2)
                                                                    (f1 b3))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:55:31.318942-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:55:31.319188-05:00  ( info)  Safe
2019-11-15 23:55:31.319385-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:55:31.319572-05:00  ( info)  Safe
2019-11-15 23:55:31.319784-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:55:31.319981-05:00  ( info)  Safe
2019-11-15 23:55:31.320224-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:55:31.420182-05:00  ( info)  Safe
2019-11-15 23:55:31.420519-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:55:31.491136-05:00  ( info)  Safe
2019-11-15 23:55:31.491192-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:55:32.056769-05:00  ( info)  testbed
2019-11-15 23:55:32.057617-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("S",
                               (Value.Ctor ("O", (Value.Tuple [])))))
                            ))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:56:26.919644-05:00  ( info)  Answer list length: 17
2019-11-15 23:56:26.919990-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n1 with
                                                                    | O N_fresh_var_3 -> 
                                                                    False
                                                                    | S N_fresh_var_3 -> 
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    N_fresh_var_3)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_lte
                                                                    (size b1)
                                                                    (add n3
                                                                    n1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> (match n1 with
                                                                    | O N_fresh_var_2 -> 
                                                                    True
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n2:unit) ->
                                                                    nat_lte
                                                                    n2
                                                                    (size
                                                                    (insert
                                                                    b1 n2)))
                                                                    N_fresh_var_2))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:56:26.920232-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:56:26.920733-05:00  ( info)  Safe
2019-11-15 23:56:26.920938-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:56:26.921111-05:00  ( info)  Safe
2019-11-15 23:56:26.921329-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:56:26.921554-05:00  ( info)  Safe
2019-11-15 23:56:26.921801-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:56:26.922898-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\",\n                 (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n              ))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-15 23:56:26.971232-05:00  ( info)  Answer list length: 16
2019-11-15 23:56:26.971554-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n3 n1 n2)
                                                                    (f1 b3))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:56:26.971785-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:56:26.972007-05:00  ( info)  Safe
2019-11-15 23:56:26.972211-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:56:26.972402-05:00  ( info)  Safe
2019-11-15 23:56:26.972618-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:56:26.972789-05:00  ( info)  Safe
2019-11-15 23:56:26.973047-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:56:27.107781-05:00  ( info)  Safe
2019-11-15 23:56:27.108405-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:56:27.194270-05:00  ( info)  Safe
2019-11-15 23:56:27.194327-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:56:27.441119-05:00  ( info)  testbed
2019-11-15 23:56:27.441923-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S",
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                    ))
                 ))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:57:45.852977-05:00  ( info)  Answer list length: 17
2019-11-15 23:57:45.853318-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> (match n1 with
                                                                  | O N_fresh_var_3 -> 
                                                                    lookup b1
                                                                    (size b2)
                                                                  | S N_fresh_var_3 -> 
                                                                    (fun (n2:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    N_fresh_var_3)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    match b5 with
                                                                    | Leaf N_fresh_var_2 -> 
                                                                    nat_lte
                                                                    (size
                                                                    (delete
                                                                    b1
                                                                    (size b2)))
                                                                    n2
                                                                    | Node N_fresh_var_2 -> 
                                                                    (fun (b6:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    (fun (b7:unit) ->
                                                                    f1 b3)
                                                                    (#3
                                                                    N_fresh_var_2))
                                                                    (#2
                                                                    N_fresh_var_2))
                                                                    (#1
                                                                    N_fresh_var_2))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:57:45.853535-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:57:45.854570-05:00  ( info)  Safe
2019-11-15 23:57:45.854821-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:57:45.855032-05:00  ( info)  Safe
2019-11-15 23:57:45.855264-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:57:45.855584-05:00  ( info)  Safe
2019-11-15 23:57:45.855853-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:57:46.211434-05:00  ( info)  Safe
2019-11-15 23:57:46.212429-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:57:46.388549-05:00  ( info)  Safe
2019-11-15 23:57:46.388559-05:00  ( info)  verifying proves postcondition
2019-11-15 23:57:47.171618-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:58:04.683965-05:00  ( info)  Answer list length: 18
2019-11-15 23:58:04.684297-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n1 with
                                                                    | O N_fresh_var_2 -> 
                                                                    False
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_lte
                                                                    (size b1)
                                                                    (add n3
                                                                    n1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:58:04.684499-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:58:04.684819-05:00  ( info)  Safe
2019-11-15 23:58:04.685021-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:58:04.685193-05:00  ( info)  Safe
2019-11-15 23:58:04.685442-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:58:04.685606-05:00  ( info)  Safe
2019-11-15 23:58:04.685848-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:58:04.853939-05:00  ( info)  Safe
2019-11-15 23:58:04.854292-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:58:04.968229-05:00  ( info)  Safe
2019-11-15 23:58:04.968239-05:00  ( info)  verifying proves postcondition
2019-11-15 23:58:05.727957-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"O\", (Value.Tuple [])));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:58:05.777074-05:00  ( info)  Answer list length: 19
2019-11-15 23:58:05.777399-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    match n1 with
                                                                    | O N_fresh_var_2 -> 
                                                                    False
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n4:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    (size b2)
                                                                    n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:58:05.777625-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:58:05.777865-05:00  ( info)  Safe
2019-11-15 23:58:05.778067-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:58:05.778245-05:00  ( info)  Safe
2019-11-15 23:58:05.778483-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:58:05.778661-05:00  ( info)  Safe
2019-11-15 23:58:05.778900-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:58:05.893668-05:00  ( info)  Safe
2019-11-15 23:58:05.894059-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:58:05.975031-05:00  ( info)  Safe
2019-11-15 23:58:05.975041-05:00  ( info)  verifying proves postcondition
2019-11-15 23:58:12.973536-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:58:13.022207-05:00  ( info)  testbed
2019-11-15 23:58:13.023097-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S",
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                    ))
                 ))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-15 23:59:15.849997-05:00  ( info)  Answer list length: 20
2019-11-15 23:59:15.850402-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n1 with
                                                                    | O N_fresh_var_2 -> 
                                                                    False
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    nat_lte
                                                                    (add
                                                                    (size b3)
                                                                    n1) n2)
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-15 23:59:15.850594-05:00  ( info)  Checking boundary for:Leaf
2019-11-15 23:59:15.851232-05:00  ( info)  Safe
2019-11-15 23:59:15.851476-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-15 23:59:15.851631-05:00  ( info)  Safe
2019-11-15 23:59:15.851938-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-15 23:59:15.852135-05:00  ( info)  Safe
2019-11-15 23:59:15.852366-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-15 23:59:15.981706-05:00  ( info)  Safe
2019-11-15 23:59:15.982089-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-15 23:59:16.090829-05:00  ( info)  Safe
2019-11-15 23:59:16.090838-05:00  ( info)  verifying proves postcondition
2019-11-15 23:59:16.975715-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"O\", (Value.Tuple [])));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-15 23:59:29.529911-05:00  ( info)  testbed
2019-11-15 23:59:29.531081-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S",
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                    ))
                 ))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:00:38.562587-05:00  ( info)  Answer list length: 21
2019-11-16 00:00:38.563131-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n1 with
                                                                    | O N_fresh_var_2 -> 
                                                                    False
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:00:38.563323-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:00:38.563779-05:00  ( info)  Safe
2019-11-16 00:00:38.564186-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:00:38.564372-05:00  ( info)  Safe
2019-11-16 00:00:38.565147-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:00:38.565374-05:00  ( info)  Safe
2019-11-16 00:00:38.565650-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:00:38.709439-05:00  ( info)  Safe
2019-11-16 00:00:38.709843-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:00:38.812995-05:00  ( info)  Safe
2019-11-16 00:00:38.813005-05:00  ( info)  verifying proves postcondition
2019-11-16 00:00:45.536581-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 00:01:00.588000-05:00  ( info)  Answer list length: 22
2019-11-16 00:01:00.588403-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lte
                                                                    (size b2)
                                                                    n1)
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lt n2
                                                                    n1)
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:01:00.589100-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:01:00.589410-05:00  ( info)  Safe
2019-11-16 00:01:00.589768-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:01:00.590007-05:00  ( info)  Safe
2019-11-16 00:01:00.590385-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:01:00.590713-05:00  ( info)  Safe
2019-11-16 00:01:00.591138-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:01:00.743489-05:00  ( info)  Safe
2019-11-16 00:01:00.743915-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:01:00.847240-05:00  ( info)  Safe
2019-11-16 00:01:00.847252-05:00  ( info)  verifying proves postcondition
2019-11-16 00:01:07.835010-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:01:07.899787-05:00  ( info)  testbed
2019-11-16 00:01:07.900857-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S",
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                    ))
                 ))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:02:02.803636-05:00  ( info)  Answer list length: 23
2019-11-16 00:02:02.804176-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lte
                                                                    (size b2)
                                                                    n1)
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3
                                                                    (size b2)
                                                                    n1)
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:02:02.804372-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:02:02.804670-05:00  ( info)  Safe
2019-11-16 00:02:02.805154-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:02:02.805312-05:00  ( info)  Safe
2019-11-16 00:02:02.805599-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:02:02.805838-05:00  ( info)  Safe
2019-11-16 00:02:02.806064-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:02:02.832684-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:02:02.934548-05:00  ( info)  Answer list length: 22
2019-11-16 00:02:02.934901-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lte
                                                                    (size b2)
                                                                    n1)
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lt n2
                                                                    n1)
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:02:02.935092-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:02:02.935350-05:00  ( info)  Safe
2019-11-16 00:02:02.935729-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:02:02.935886-05:00  ( info)  Safe
2019-11-16 00:02:02.936147-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:02:02.936392-05:00  ( info)  Safe
2019-11-16 00:02:02.936618-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:02:03.127101-05:00  ( info)  Safe
2019-11-16 00:02:03.127432-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:02:03.242010-05:00  ( info)  Safe
2019-11-16 00:02:03.242223-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:02:03.547556-05:00  ( info)  testbed
2019-11-16 00:02:03.548715-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:03:03.052159-05:00  ( info)  Answer list length: 23
2019-11-16 00:03:03.052535-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lte
                                                                    (size b2)
                                                                    n1)
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lte
                                                                    (add n2
                                                                    (size b2))
                                                                    n1)
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:03:03.052804-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:03:03.053487-05:00  ( info)  Safe
2019-11-16 00:03:03.053732-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:03:03.053912-05:00  ( info)  Safe
2019-11-16 00:03:03.054182-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:03:03.054359-05:00  ( info)  Safe
2019-11-16 00:03:03.054662-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:03:03.326352-05:00  ( info)  Safe
2019-11-16 00:03:03.326724-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:03:03.507884-05:00  ( info)  Safe
2019-11-16 00:03:03.507895-05:00  ( info)  verifying proves postcondition
2019-11-16 00:03:11.032177-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:03:16.526206-05:00  ( info)  testbed
2019-11-16 00:03:16.527447-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:04:19.059663-05:00  ( info)  Answer list length: 24
2019-11-16 00:04:19.063087-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (nat_lte
                                                                    (size b2)
                                                                    n1)
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lt n2
                                                                    (min_val
                                                                    (delete
                                                                    b1 n2)))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:04:19.063449-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:04:19.063819-05:00  ( info)  Safe
2019-11-16 00:04:19.064077-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:04:19.064302-05:00  ( info)  Safe
2019-11-16 00:04:19.064654-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:04:19.064844-05:00  ( info)  Safe
2019-11-16 00:04:19.065126-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:04:19.266934-05:00  ( info)  Safe
2019-11-16 00:04:19.267251-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:04:19.407492-05:00  ( info)  Safe
2019-11-16 00:04:19.407503-05:00  ( info)  verifying proves postcondition
2019-11-16 00:04:26.425007-05:00  ( info)  postcondition proven
2019-11-16 00:04:26.425330-05:00  ( info)  verifying: Leaf
2019-11-16 00:04:26.425625-05:00  ( info)  Safe
2019-11-16 00:04:26.425851-05:00  ( info)  verifying: fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:04:26.426023-05:00  ( info)  Safe
2019-11-16 00:04:26.426234-05:00  ( info)  verifying: fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:04:26.426425-05:00  ( info)  Safe
2019-11-16 00:04:26.426698-05:00  ( info)  verifying: fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:04:27.703762-05:00  ( info)  Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Node\",\n                         (Value.Tuple\n                            [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                              (Value.Ctor (\"S\",\n                                 (Value.Ctor (\"O\", (Value.Tuple [])))));\n                              (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                         ))\n                      ])\n                 ));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:04:35.570676-05:00  ( info)  testbed
2019-11-16 00:04:35.571852-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:05:52.812514-05:00  ( info)  Answer list length: 25
2019-11-16 00:05:52.815767-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lt n2
                                                                    (min_val
                                                                    (delete
                                                                    b1 n2)))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:05:52.817632-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:05:52.818265-05:00  ( info)  Safe
2019-11-16 00:05:52.819034-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:05:52.819214-05:00  ( info)  Safe
2019-11-16 00:05:52.831251-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:05:52.831670-05:00  ( info)  Safe
2019-11-16 00:05:52.832488-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:05:53.449350-05:00  ( info)  Safe
2019-11-16 00:05:53.450636-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:05:53.757831-05:00  ( info)  Safe
2019-11-16 00:05:53.757842-05:00  ( info)  verifying proves postcondition
2019-11-16 00:06:03.655859-05:00  ( info)  postcondition proven
2019-11-16 00:06:03.656313-05:00  ( info)  verifying: Leaf
2019-11-16 00:06:03.656600-05:00  ( info)  Safe
2019-11-16 00:06:03.656919-05:00  ( info)  verifying: fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:06:03.657098-05:00  ( info)  Safe
2019-11-16 00:06:03.657312-05:00  ( info)  verifying: fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:06:03.657496-05:00  ( info)  Safe
2019-11-16 00:06:03.657842-05:00  ( info)  verifying: fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:06:06.407212-05:00  ( info)  Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Node\",\n                        (Value.Tuple\n                           [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                             (Value.Ctor (\"O\", (Value.Tuple [])));\n                             (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                        ));\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:06:13.060555-05:00  ( info)  testbed
2019-11-16 00:06:13.064041-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:07:51.967220-05:00  ( info)  Answer list length: 26
2019-11-16 00:07:51.969436-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    lookup b1
                                                                    (size
                                                                    (insert
                                                                    b1
                                                                    (size b2))))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:07:51.969653-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:07:51.971083-05:00  ( info)  Safe
2019-11-16 00:07:51.972058-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:07:51.972306-05:00  ( info)  Safe
2019-11-16 00:07:51.973112-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:07:51.973342-05:00  ( info)  Safe
2019-11-16 00:07:51.973580-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:07:52.006581-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:07:52.131191-05:00  ( info)  Answer list length: 25
2019-11-16 00:07:52.132127-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lt n2
                                                                    (min_val
                                                                    (delete
                                                                    b1 n2)))
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:07:52.132370-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:07:52.132649-05:00  ( info)  Safe
2019-11-16 00:07:52.133317-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:07:52.133483-05:00  ( info)  Safe
2019-11-16 00:07:52.135171-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:07:52.135476-05:00  ( info)  Safe
2019-11-16 00:07:52.135907-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:07:52.365669-05:00  ( info)  Safe
2019-11-16 00:07:52.366221-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:07:52.528887-05:00  ( info)  Safe
2019-11-16 00:07:52.528990-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:08:01.725358-05:00  ( info)  testbed
2019-11-16 00:08:01.728400-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:10:13.357050-05:00  ( info)  Answer list length: 26
2019-11-16 00:10:13.360735-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lte
                                                                    (size
                                                                    (insert
                                                                    b1
                                                                    (size b2)))
                                                                    n1)
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:10:13.366108-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:10:13.367291-05:00  ( info)  Safe
2019-11-16 00:10:13.367630-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:10:13.368648-05:00  ( info)  Safe
2019-11-16 00:10:13.369506-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:10:13.369739-05:00  ( info)  Safe
2019-11-16 00:10:13.370317-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:10:13.932033-05:00  ( info)  Safe
2019-11-16 00:10:13.932536-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:10:14.223440-05:00  ( info)  Safe
2019-11-16 00:10:14.223453-05:00  ( info)  verifying proves postcondition
2019-11-16 00:10:15.817007-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\",\n                     (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))\n                     ))\n                  ));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:11:15.999727-05:00  ( info)  testbed
2019-11-16 00:11:16.003239-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("O", (Value.Tuple [])))))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:14:06.712600-05:00  ( info)  Answer list length: 27
2019-11-16 00:14:06.725033-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_between
                                                                    (size
                                                                    (delete
                                                                    b2 n2))
                                                                    n2 n1)
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:14:06.725464-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:14:06.727776-05:00  ( info)  Safe
2019-11-16 00:14:06.729679-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:14:06.729984-05:00  ( info)  Safe
2019-11-16 00:14:06.730510-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:14:06.731472-05:00  ( info)  Safe
2019-11-16 00:14:06.733087-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:14:07.341658-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ))\n               ])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:14:07.995728-05:00  ( info)  Answer list length: 26
2019-11-16 00:14:07.998135-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match n2 with
                                                                    | O N_fresh_var_2 -> 
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2)
                                                                    | S N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_lte
                                                                    (size
                                                                    (insert
                                                                    b1
                                                                    (size b2)))
                                                                    n1)
                                                                    N_fresh_var_2)
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:14:07.998398-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:14:07.999259-05:00  ( info)  Safe
2019-11-16 00:14:08.007440-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:14:08.007695-05:00  ( info)  Safe
2019-11-16 00:14:08.008781-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:14:08.009280-05:00  ( info)  Safe
2019-11-16 00:14:08.009550-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:14:09.498169-05:00  ( info)  Safe
2019-11-16 00:14:09.498688-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:14:10.792015-05:00  ( info)  Safe
2019-11-16 00:14:10.792062-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\",\n                     (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))\n                     ))\n                  ));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\",\n              (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))))\n           ));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:14:36.709675-05:00  ( info)  testbed
2019-11-16 00:14:36.712522-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("O", (Value.Tuple [])))))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ))
                  ])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:19:02.004187-05:00  ( info)  Answer list length: 27
2019-11-16 00:19:02.025192-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match 
                                                                    delete b2
                                                                    n2 with
                                                                    | Leaf N_fresh_var_2 -> 
                                                                    nat_lt n2
                                                                    n1
                                                                    | Node N_fresh_var_2 -> 
                                                                    (fun (b4:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_between
                                                                    n2 n3 n1)
                                                                    (#3
                                                                    N_fresh_var_2))
                                                                    (#2
                                                                    N_fresh_var_2))
                                                                    (#1
                                                                    N_fresh_var_2))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:19:02.026346-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:19:02.034868-05:00  ( info)  Safe
2019-11-16 00:19:02.037576-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:19:02.055750-05:00  ( info)  Safe
2019-11-16 00:19:02.056881-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:19:02.062659-05:00  ( info)  Safe
2019-11-16 00:19:02.063811-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:19:02.962319-05:00  ( info)  Safe
2019-11-16 00:19:02.964718-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 00:19:03.263414-05:00  ( info)  Safe
2019-11-16 00:19:03.263425-05:00  ( info)  verifying proves postcondition
2019-11-16 00:19:15.418959-05:00  ( info)  postcondition proven
2019-11-16 00:19:15.438199-05:00  ( info)  verifying: Leaf
2019-11-16 00:19:15.445890-05:00  ( info)  Safe
2019-11-16 00:19:15.446324-05:00  ( info)  verifying: fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:19:15.450314-05:00  ( info)  Safe
2019-11-16 00:19:15.453257-05:00  ( info)  verifying: fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:19:15.458841-05:00  ( info)  Safe
2019-11-16 00:19:15.460270-05:00  ( info)  verifying: fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:19:28.466966-05:00  ( info)  Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Node\",\n                        (Value.Tuple\n                           [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                             (Value.Ctor (\"O\", (Value.Tuple [])));\n                             (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                        ));\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\",\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ))\n                      ))\n                   ));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Node\",\n                        (Value.Tuple\n                           [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                             (Value.Ctor (\"O\", (Value.Tuple [])));\n                             (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                        ));\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:20:30.660731-05:00  ( info)  testbed
2019-11-16 00:20:30.662592-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Node",
                            (Value.Tuple
                               [(Value.Ctor ("Leaf", (Value.Tuple [])));
                                 (Value.Ctor ("O", (Value.Tuple [])));
                                 (Value.Ctor ("Leaf", (Value.Tuple [])))])
                            ));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S",
                         (Value.Ctor ("S",
                            (Value.Ctor ("O", (Value.Tuple [])))))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("O", (Value.Tuple [])));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ))
                  ])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S",
                 (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
              ));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ))
                  ))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("S",
                                (Value.Ctor ("O", (Value.Tuple [])))))
                             ))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("S",
                                     (Value.Ctor ("O", (Value.Tuple [])))))
                                  ))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S",
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))))
               ));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S",
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Node",
                       (Value.Tuple
                          [(Value.Ctor ("Leaf", (Value.Tuple [])));
                            (Value.Ctor ("S",
                               (Value.Ctor ("S",
                                  (Value.Ctor ("O", (Value.Tuple [])))))
                               ));
                            (Value.Ctor ("Leaf", (Value.Tuple [])))])
                       ))
                    ])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 00:39:21.185951-05:00  ( info)  Answer list length: 28
2019-11-16 00:39:21.197255-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> (match b3 with
                                                                  | Leaf N_fresh_var_3 -> 
                                                                    True
                                                                  | Node N_fresh_var_3 -> 
                                                                    (fun (b4:unit) ->
                                                                    (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    (#3
                                                                    N_fresh_var_3))
                                                                    (#2
                                                                    N_fresh_var_3))
                                                                    (#1
                                                                    N_fresh_var_3))
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    match 
                                                                    min_max_vals
                                                                    b4 b3 with
                                                                    | JustLeft N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n2 n1)
                                                                    N_fresh_var_2
                                                                    | JustRight N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    nat_between
                                                                    n2 n1 n3)
                                                                    N_fresh_var_2
                                                                    | Both N_fresh_var_2 -> 
                                                                    (fun (n3:unit) ->
                                                                    (fun (n4:unit) ->
                                                                    False)
                                                                    (#2
                                                                    N_fresh_var_2))
                                                                    (#1
                                                                    N_fresh_var_2)
                                                                    | Neither N_fresh_var_2 -> 
                                                                    nat_lte
                                                                    (add n2
                                                                    (size b2))
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:39:21.208605-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:39:21.210740-05:00  ( info)  Safe
2019-11-16 00:39:21.211693-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:39:21.212862-05:00  ( info)  Safe
2019-11-16 00:39:21.218487-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:39:21.218717-05:00  ( info)  Safe
2019-11-16 00:39:21.219752-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:39:21.658370-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\",\n                      (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                         ))\n                      ))\n                   ));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 00:39:22.183612-05:00  ( info)  Answer list length: 27
2019-11-16 00:39:22.187087-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b2 b3 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    match 
                                                                    delete b2
                                                                    n2 with
                                                                    | Leaf N_fresh_var_2 -> 
                                                                    nat_lt n2
                                                                    n1
                                                                    | Node N_fresh_var_2 -> 
                                                                    (fun (b4:unit) ->
                                                                    (fun (n3:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_between
                                                                    n2 n3 n1)
                                                                    (#3
                                                                    N_fresh_var_2))
                                                                    (#2
                                                                    N_fresh_var_2))
                                                                    (#1
                                                                    N_fresh_var_2))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1
                                                                    (min_val
                                                                    b3))
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    and
                                                                    (nat_between
                                                                    n2 n1 n3)
                                                                    (f1 b2))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 00:39:22.187391-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 00:39:22.188324-05:00  ( info)  Safe
2019-11-16 00:39:22.191576-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 00:39:22.192198-05:00  ( info)  Safe
2019-11-16 00:39:22.192547-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 00:39:22.192951-05:00  ( info)  Safe
2019-11-16 00:39:22.193300-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 00:39:24.834843-05:00  ( info)  Safe
2019-11-16 00:39:24.835186-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                         2019-11-16 01:01:41.923454-05:00  ( info)  
2019-11-16 01:01:41.923855-05:00  ( info)  DSInfer========================================================================
2019-11-16 01:01:41.924586-05:00  ( info)  Answer list length: 2
2019-11-16 01:01:41.925013-05:00  ( info)  Candidate invariant: fun (x:bst) -> False
2019-11-16 01:01:41.925740-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:41.925938-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
                                               Comes from
                                               ()
2019-11-16 01:01:41.925945-05:00  ( info)  Answer list length: 1
2019-11-16 01:01:41.926137-05:00  ( info)  Candidate invariant: fun (x:bst) -> True
2019-11-16 01:01:41.926359-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:41.926501-05:00  ( info)  Safe
2019-11-16 01:01:41.926709-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:41.926856-05:00  ( info)  Safe
2019-11-16 01:01:41.927088-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:41.927248-05:00  ( info)  Safe
2019-11-16 01:01:41.927476-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:41.928140-05:00  ( info)  Safe
2019-11-16 01:01:41.928396-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:41.928774-05:00  ( info)  Safe
2019-11-16 01:01:41.928778-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:41.969171-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:41.969212-05:00  ( info)  testbed
2019-11-16 01:01:41.969244-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests = [(Value.Ctor ("Leaf", (Value.Tuple [])))] }
2019-11-16 01:01:42.003506-05:00  ( info)  Answer list length: 2
2019-11-16 01:01:42.003803-05:00  ( info)  Candidate invariant: fun (b1:bst) -> nat_lte (size b1) (size empty)
2019-11-16 01:01:42.003986-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.004272-05:00  ( info)  Safe
2019-11-16 01:01:42.004476-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.004638-05:00  ( info)  Safe
2019-11-16 01:01:42.004907-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.005058-05:00  ( info)  Safe
2019-11-16 01:01:42.005313-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.005579-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 01:01:42.005591-05:00  ( info)  Answer list length: 1
2019-11-16 01:01:42.005778-05:00  ( info)  Candidate invariant: fun (x:bst) -> True
2019-11-16 01:01:42.005995-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.006133-05:00  ( info)  Safe
2019-11-16 01:01:42.006411-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.006598-05:00  ( info)  Safe
2019-11-16 01:01:42.006819-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.007077-05:00  ( info)  Safe
2019-11-16 01:01:42.007302-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.008790-05:00  ( info)  Safe
2019-11-16 01:01:42.009176-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:42.010286-05:00  ( info)  Safe
2019-11-16 01:01:42.010309-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:42.010379-05:00  ( info)  testbed
2019-11-16 01:01:42.010412-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:42.091972-05:00  ( info)  Answer list length: 2
2019-11-16 01:01:42.092263-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> True
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:42.093087-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.093310-05:00  ( info)  Safe
2019-11-16 01:01:42.093554-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.093770-05:00  ( info)  Safe
2019-11-16 01:01:42.094023-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.094201-05:00  ( info)  Safe
2019-11-16 01:01:42.094485-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.097094-05:00  ( info)  Safe
2019-11-16 01:01:42.097378-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:42.099497-05:00  ( info)  Safe
2019-11-16 01:01:42.099500-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:42.151078-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:42.151282-05:00  ( info)  testbed
2019-11-16 01:01:42.151332-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:42.198770-05:00  ( info)  Answer list length: 3
2019-11-16 01:01:42.199083-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b3) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:42.199315-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.199516-05:00  ( info)  Safe
2019-11-16 01:01:42.199810-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.200030-05:00  ( info)  Safe
2019-11-16 01:01:42.200264-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.200548-05:00  ( info)  Safe
2019-11-16 01:01:42.200782-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.202418-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:42.202531-05:00  ( info)  Answer list length: 2
2019-11-16 01:01:42.202795-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> True
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:42.202981-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.203188-05:00  ( info)  Safe
2019-11-16 01:01:42.203402-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.203669-05:00  ( info)  Safe
2019-11-16 01:01:42.203926-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.204118-05:00  ( info)  Safe
2019-11-16 01:01:42.204413-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.209016-05:00  ( info)  Safe
2019-11-16 01:01:42.209343-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:42.213198-05:00  ( info)  Safe
2019-11-16 01:01:42.213229-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:42.216228-05:00  ( info)  testbed
2019-11-16 01:01:42.216313-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:42.261663-05:00  ( info)  Answer list length: 3
2019-11-16 01:01:42.261986-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> lookup b1
                                                                 (size b3)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:42.262175-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.262398-05:00  ( info)  Safe
2019-11-16 01:01:42.262660-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.262809-05:00  ( info)  Safe
2019-11-16 01:01:42.263048-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.263204-05:00  ( info)  Safe
2019-11-16 01:01:42.263448-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.263766-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 01:01:42.263942-05:00  ( info)  Answer list length: 2
2019-11-16 01:01:42.264230-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> True
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    False)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:42.264415-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.264606-05:00  ( info)  Safe
2019-11-16 01:01:42.264836-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.264991-05:00  ( info)  Safe
2019-11-16 01:01:42.265233-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.265434-05:00  ( info)  Safe
2019-11-16 01:01:42.265674-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.268274-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:42.268313-05:00  ( info)  Answer list length: 1
2019-11-16 01:01:42.268533-05:00  ( info)  Candidate invariant: fun (x:bst) -> True
2019-11-16 01:01:42.268727-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.268875-05:00  ( info)  Safe
2019-11-16 01:01:42.269088-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.269265-05:00  ( info)  Safe
2019-11-16 01:01:42.269480-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.269674-05:00  ( info)  Safe
2019-11-16 01:01:42.269901-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.274043-05:00  ( info)  Safe
2019-11-16 01:01:42.274299-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:42.277634-05:00  ( info)  Safe
2019-11-16 01:01:42.277659-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:42.281132-05:00  ( info)  testbed
2019-11-16 01:01:42.281208-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:42.288675-05:00  ( info)  Answer list length: 2
2019-11-16 01:01:42.288955-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> True
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n2
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:42.289132-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.289303-05:00  ( info)  Safe
2019-11-16 01:01:42.289524-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.289669-05:00  ( info)  Safe
2019-11-16 01:01:42.289910-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.290063-05:00  ( info)  Safe
2019-11-16 01:01:42.290300-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.298288-05:00  ( info)  Safe
2019-11-16 01:01:42.298642-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:42.305836-05:00  ( info)  Safe
2019-11-16 01:01:42.305843-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:42.356359-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:42.360325-05:00  ( info)  testbed
2019-11-16 01:01:42.360424-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:42.374664-05:00  ( info)  Answer list length: 3
2019-11-16 01:01:42.374979-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n2
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:42.375190-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:42.375369-05:00  ( info)  Safe
2019-11-16 01:01:42.375602-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:42.375793-05:00  ( info)  Safe
2019-11-16 01:01:42.376007-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:42.376201-05:00  ( info)  Safe
2019-11-16 01:01:42.376423-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:42.386712-05:00  ( info)  Safe
2019-11-16 01:01:42.386979-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:42.395197-05:00  ( info)  Safe
2019-11-16 01:01:42.395199-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:43.133097-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:43.140249-05:00  ( info)  Answer list length: 4
2019-11-16 01:01:43.140523-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b2) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:43.140733-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:43.140956-05:00  ( info)  Safe
2019-11-16 01:01:43.141157-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:43.141332-05:00  ( info)  Safe
2019-11-16 01:01:43.141553-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:43.141760-05:00  ( info)  Safe
2019-11-16 01:01:43.142024-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:43.151117-05:00  ( info)  Safe
2019-11-16 01:01:43.151410-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:43.159486-05:00  ( info)  Safe
2019-11-16 01:01:43.159489-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:43.665985-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:43.666901-05:00  ( info)  testbed
2019-11-16 01:01:43.667036-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:44.160054-05:00  ( info)  Answer list length: 5
2019-11-16 01:01:44.160352-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    lookup
                                                                    (delete
                                                                    b2 n1)
                                                                    (size b4))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:44.160571-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:44.160811-05:00  ( info)  Safe
2019-11-16 01:01:44.161010-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:44.161178-05:00  ( info)  Safe
2019-11-16 01:01:44.161426-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:44.161581-05:00  ( info)  Safe
2019-11-16 01:01:44.161844-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:44.179753-05:00  ( info)  Safe
2019-11-16 01:01:44.180062-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:44.194920-05:00  ( info)  Safe
2019-11-16 01:01:44.194924-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:44.872256-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"O\", (Value.Tuple [])));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ))\n               ])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:44.893023-05:00  ( info)  Answer list length: 6
2019-11-16 01:01:44.893413-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> lookup b1
                                                              (size
                                                                 (delete b1
                                                                    n1))
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_lte
                                                                 (size
                                                                    (
                                                                    delete b1
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:44.893633-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:44.893907-05:00  ( info)  Safe
2019-11-16 01:01:44.894107-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:44.894286-05:00  ( info)  Safe
2019-11-16 01:01:44.894501-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:44.894698-05:00  ( info)  Safe
2019-11-16 01:01:44.894942-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:44.902375-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:44.904749-05:00  ( info)  Answer list length: 5
2019-11-16 01:01:44.905060-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    lookup
                                                                    (delete
                                                                    b2 n1)
                                                                    (size b4))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:44.905243-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:44.905484-05:00  ( info)  Safe
2019-11-16 01:01:44.905693-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:44.905889-05:00  ( info)  Safe
2019-11-16 01:01:44.906100-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:44.906278-05:00  ( info)  Safe
2019-11-16 01:01:44.906541-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:44.927786-05:00  ( info)  Safe
2019-11-16 01:01:44.928121-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:44.946692-05:00  ( info)  Safe
2019-11-16 01:01:44.946737-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"O\", (Value.Tuple [])));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ))\n               ])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:44.948570-05:00  ( info)  testbed
2019-11-16 01:01:44.948804-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("O", (Value.Tuple [])));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:45.031125-05:00  ( info)  Answer list length: 6
2019-11-16 01:01:45.031434-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> not
                                                              (lookup
                                                                 (delete b1
                                                                    n1)
                                                                 n1)
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_eq
                                                                 (size
                                                                    (
                                                                    delete b1
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:45.031641-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:45.032017-05:00  ( info)  Safe
2019-11-16 01:01:45.032222-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:45.032396-05:00  ( info)  Safe
2019-11-16 01:01:45.032637-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:45.033025-05:00  ( info)  Safe
2019-11-16 01:01:45.033277-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:45.034367-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Leaf\", (Value.Tuple [])))")
2019-11-16 01:01:45.036849-05:00  ( info)  Answer list length: 5
2019-11-16 01:01:45.037092-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    lookup
                                                                    (delete
                                                                    b2 n1)
                                                                    (size b4))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:45.037294-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:45.037488-05:00  ( info)  Safe
2019-11-16 01:01:45.037763-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:45.037936-05:00  ( info)  Safe
2019-11-16 01:01:45.038154-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:45.038407-05:00  ( info)  Safe
2019-11-16 01:01:45.038652-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:45.049586-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:45.050749-05:00  ( info)  Answer list length: 4
2019-11-16 01:01:45.051002-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b2) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:45.051198-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:45.051420-05:00  ( info)  Safe
2019-11-16 01:01:45.051622-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:45.051792-05:00  ( info)  Safe
2019-11-16 01:01:45.052010-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:45.052233-05:00  ( info)  Safe
2019-11-16 01:01:45.052481-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:45.069191-05:00  ( info)  Safe
2019-11-16 01:01:45.069476-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:45.083112-05:00  ( info)  Safe
2019-11-16 01:01:45.083146-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:45.087706-05:00  ( info)  testbed
2019-11-16 01:01:45.087878-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:45.164616-05:00  ( info)  Answer list length: 5
2019-11-16 01:01:45.164952-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (add n2
                                                                    (size b2))
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:45.165131-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:45.165337-05:00  ( info)  Safe
2019-11-16 01:01:45.165560-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:45.165710-05:00  ( info)  Safe
2019-11-16 01:01:45.165965-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:45.166135-05:00  ( info)  Safe
2019-11-16 01:01:45.166383-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:45.183859-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:45.185159-05:00  ( info)  Answer list length: 4
2019-11-16 01:01:45.185433-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b2) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:45.185608-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:45.185816-05:00  ( info)  Safe
2019-11-16 01:01:45.186014-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:45.186213-05:00  ( info)  Safe
2019-11-16 01:01:45.186444-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:45.186601-05:00  ( info)  Safe
2019-11-16 01:01:45.186835-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:45.204410-05:00  ( info)  Safe
2019-11-16 01:01:45.204670-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:45.220377-05:00  ( info)  Safe
2019-11-16 01:01:45.220407-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:45.244332-05:00  ( info)  Answer list length: 5
2019-11-16 01:01:45.244638-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> not
                                                              (lookup
                                                                 (delete b1
                                                                    n1)
                                                                 n1)
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_lte
                                                                 (size
                                                                    (
                                                                    delete b1
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:45.244819-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:45.245074-05:00  ( info)  Safe
2019-11-16 01:01:45.245294-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:45.245443-05:00  ( info)  Safe
2019-11-16 01:01:45.245726-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:45.245919-05:00  ( info)  Safe
2019-11-16 01:01:45.246146-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:45.260746-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:45.262538-05:00  ( info)  Answer list length: 4
2019-11-16 01:01:45.262842-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b2) n1
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:45.263023-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:45.263233-05:00  ( info)  Safe
2019-11-16 01:01:45.263435-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:45.263765-05:00  ( info)  Safe
2019-11-16 01:01:45.264001-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:45.264158-05:00  ( info)  Safe
2019-11-16 01:01:45.264453-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:45.287246-05:00  ( info)  Safe
2019-11-16 01:01:45.287546-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:45.306358-05:00  ( info)  Safe
2019-11-16 01:01:45.306390-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:45.308320-05:00  ( info)  testbed
2019-11-16 01:01:45.308534-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:45.403300-05:00  ( info)  Answer list length: 5
2019-11-16 01:01:45.403667-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:45.403871-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:45.404059-05:00  ( info)  Safe
2019-11-16 01:01:45.404286-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:45.404471-05:00  ( info)  Safe
2019-11-16 01:01:45.404685-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:45.404898-05:00  ( info)  Safe
2019-11-16 01:01:45.405119-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:45.432374-05:00  ( info)  Safe
2019-11-16 01:01:45.432717-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:45.455625-05:00  ( info)  Safe
2019-11-16 01:01:45.455632-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:46.530346-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ))\n               ])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:46.562937-05:00  ( info)  Answer list length: 6
2019-11-16 01:01:46.563224-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> not
                                                              (lookup
                                                                 (delete b1
                                                                    n1)
                                                                 n1)
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_lte
                                                                 (size
                                                                    (
                                                                    insert b2
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:46.563533-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:46.563819-05:00  ( info)  Safe
2019-11-16 01:01:46.564033-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:46.564253-05:00  ( info)  Safe
2019-11-16 01:01:46.564507-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:46.564665-05:00  ( info)  Safe
2019-11-16 01:01:46.564925-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:46.610684-05:00  ( info)  Safe
2019-11-16 01:01:46.611034-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:46.658385-05:00  ( info)  Safe
2019-11-16 01:01:46.658394-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:47.165665-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:47.169488-05:00  ( info)  testbed
2019-11-16 01:01:47.169798-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:47.830307-05:00  ( info)  Answer list length: 7
2019-11-16 01:01:47.830610-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> lookup b1
                                                                 (add
                                                                    (
                                                                    size b2)
                                                                    (
                                                                    min_val
                                                                    b1))
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:47.830789-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:47.831008-05:00  ( info)  Safe
2019-11-16 01:01:47.831264-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:47.831413-05:00  ( info)  Safe
2019-11-16 01:01:47.831655-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:47.831812-05:00  ( info)  Safe
2019-11-16 01:01:47.832063-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:47.840229-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:47.844663-05:00  ( info)  Answer list length: 6
2019-11-16 01:01:47.844911-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match n1 with
                                       | O N_fresh_var_1 -> not
                                                              (lookup
                                                                 (delete b1
                                                                    n1)
                                                                 n1)
                                       | S N_fresh_var_1 -> (fun (n2:unit) ->
                                                               nat_lte
                                                                 (size
                                                                    (
                                                                    insert b2
                                                                    n2))
                                                                 n1)
                                                              N_fresh_var_1)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:47.845090-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:47.845312-05:00  ( info)  Safe
2019-11-16 01:01:47.845582-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:47.845730-05:00  ( info)  Safe
2019-11-16 01:01:47.845967-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:47.846254-05:00  ( info)  Safe
2019-11-16 01:01:47.846480-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:47.902832-05:00  ( info)  Safe
2019-11-16 01:01:47.903154-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:47.949199-05:00  ( info)  Safe
2019-11-16 01:01:47.949238-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:47.958674-05:00  ( info)  testbed
2019-11-16 01:01:47.958974-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:48.274550-05:00  ( info)  Answer list length: 7
2019-11-16 01:01:48.274869-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b2
                                                                    n1))
                                                                 (f1 b2)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lt n1
                                                                    n2)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:48.275052-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:48.275303-05:00  ( info)  Safe
2019-11-16 01:01:48.275535-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:48.275685-05:00  ( info)  Safe
2019-11-16 01:01:48.275977-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:48.276175-05:00  ( info)  Safe
2019-11-16 01:01:48.276409-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:48.308239-05:00  ( info)  Safe
2019-11-16 01:01:48.308643-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:48.343234-05:00  ( info)  Safe
2019-11-16 01:01:48.343242-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:49.052366-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:49.091997-05:00  ( info)  Answer list length: 8
2019-11-16 01:01:49.092336-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:49.092517-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:49.092737-05:00  ( info)  Safe
2019-11-16 01:01:49.093190-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:49.093340-05:00  ( info)  Safe
2019-11-16 01:01:49.093590-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:49.093957-05:00  ( info)  Safe
2019-11-16 01:01:49.094183-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:49.136652-05:00  ( info)  Safe
2019-11-16 01:01:49.136982-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:49.170830-05:00  ( info)  Safe
2019-11-16 01:01:49.170838-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:49.937000-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:49.943159-05:00  ( info)  testbed
2019-11-16 01:01:49.943482-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:50.316981-05:00  ( info)  Answer list length: 9
2019-11-16 01:01:50.317293-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (size
                                                                    (delete
                                                                    b1
                                                                    (size
                                                                    empty)))
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:50.317478-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:50.317807-05:00  ( info)  Safe
2019-11-16 01:01:50.318010-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:50.318167-05:00  ( info)  Safe
2019-11-16 01:01:50.318412-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:50.318570-05:00  ( info)  Safe
2019-11-16 01:01:50.318819-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:50.337229-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:50.344298-05:00  ( info)  Answer list length: 8
2019-11-16 01:01:50.344585-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> not
                                                                 (lookup b3
                                                                    n1)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    and
                                                                    (not
                                                                    (lookup
                                                                    b2 n1))
                                                                    (f1 b2))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:50.344764-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:50.344990-05:00  ( info)  Safe
2019-11-16 01:01:50.345240-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:50.345392-05:00  ( info)  Safe
2019-11-16 01:01:50.345643-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:50.345801-05:00  ( info)  Safe
2019-11-16 01:01:50.346045-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:50.385563-05:00  ( info)  Safe
2019-11-16 01:01:50.385879-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:50.421487-05:00  ( info)  Safe
2019-11-16 01:01:50.421530-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:50.459482-05:00  ( info)  Answer list length: 9
2019-11-16 01:01:50.459793-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b2
                                                                    n1))
                                                                 (f1 b2)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    not
                                                                    (lookup
                                                                    (delete
                                                                    b1 n1) n1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:50.459970-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:50.460193-05:00  ( info)  Safe
2019-11-16 01:01:50.460411-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:50.460584-05:00  ( info)  Safe
2019-11-16 01:01:50.460879-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:50.461094-05:00  ( info)  Safe
2019-11-16 01:01:50.461346-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:50.547853-05:00  ( info)  Safe
2019-11-16 01:01:50.548341-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:50.610512-05:00  ( info)  Safe
2019-11-16 01:01:50.610520-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:51.747420-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:51.754665-05:00  ( info)  testbed
2019-11-16 01:01:51.755043-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:52.381599-05:00  ( info)  Answer list length: 10
2019-11-16 01:01:52.381895-05:00  ( info)  Candidate invariant: fun (b1:bst) ->
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> nat_lte
                                                                 (size b3)
                                                                 (min_val
                                                                    (
                                                                    delete b3
                                                                    n1))
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (add
                                                                    (size b2)
                                                                    (min_val
                                                                    b1)) n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:52.382114-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:52.382384-05:00  ( info)  Safe
2019-11-16 01:01:52.382584-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:52.382762-05:00  ( info)  Safe
2019-11-16 01:01:52.382983-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:52.383184-05:00  ( info)  Safe
2019-11-16 01:01:52.383439-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:52.399311-05:00  ( info)  Boundary Not Satisfied, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Node\",\n                   (Value.Tuple\n                      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                        (Value.Ctor (\"S\",\n                           (Value.Ctor (\"S\",\n                              (Value.Ctor (\"O\", (Value.Tuple [])))))\n                           ));\n                        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                   ))\n                ])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:52.409956-05:00  ( info)  Answer list length: 9
2019-11-16 01:01:52.410254-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b3 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b2
                                                                    n1))
                                                                 (f1 b2)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    not
                                                                    (lookup
                                                                    (delete
                                                                    b1 n1) n1))
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:52.410431-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:52.410669-05:00  ( info)  Safe
2019-11-16 01:01:52.410906-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:52.411057-05:00  ( info)  Safe
2019-11-16 01:01:52.411310-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:52.411486-05:00  ( info)  Safe
2019-11-16 01:01:52.411707-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:52.510661-05:00  ( info)  Safe
2019-11-16 01:01:52.511000-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:52.591956-05:00  ( info)  Safe
2019-11-16 01:01:52.592002-05:00  ( info)  Prior counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:52.605075-05:00  ( info)  testbed
2019-11-16 01:01:52.605489-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("S",
                             (Value.Ctor ("O", (Value.Tuple [])))));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:53.294237-05:00  ( info)  Answer list length: 10
2019-11-16 01:01:53.294549-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b3
                                                                    n1))
                                                                 (f1 b3)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (add
                                                                    (size b2)
                                                                    (min_val
                                                                    b1)) n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:53.294729-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:53.294963-05:00  ( info)  Safe
2019-11-16 01:01:53.295182-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:53.295393-05:00  ( info)  Safe
2019-11-16 01:01:53.295643-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:53.295802-05:00  ( info)  Safe
2019-11-16 01:01:53.296053-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:53.351488-05:00  ( info)  Safe
2019-11-16 01:01:53.351807-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:53.392650-05:00  ( info)  Safe
2019-11-16 01:01:53.392659-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:54.266425-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Node\",\n                 (Value.Tuple\n                    [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                      (Value.Ctor (\"O\", (Value.Tuple [])));\n                      (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                 ));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:54.298437-05:00  ( info)  testbed
2019-11-16 01:01:54.298934-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Node",
                    (Value.Tuple
                       [(Value.Ctor ("Leaf", (Value.Tuple [])));
                         (Value.Ctor ("O", (Value.Tuple [])));
                         (Value.Ctor ("Leaf", (Value.Tuple [])))])
                    ));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:55.083252-05:00  ( info)  Answer list length: 11
2019-11-16 01:01:55.083560-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match b2 with
                                       | Leaf N_fresh_var_1 -> and
                                                                 (not
                                                                    (
                                                                    lookup b3
                                                                    n1))
                                                                 (f1 b3)
                                       | Node N_fresh_var_1 -> (fun (b4:unit) ->
                                                                  (fun (n2:unit) ->
                                                                    (fun (b5:unit) ->
                                                                    nat_lte
                                                                    (size
                                                                    (insert
                                                                    b2
                                                                    (size b4)))
                                                                    n1)
                                                                    (#3
                                                                    N_fresh_var_1))
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1))
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:55.083775-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:55.084040-05:00  ( info)  Safe
2019-11-16 01:01:55.084249-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:55.084424-05:00  ( info)  Safe
2019-11-16 01:01:55.084646-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:55.084855-05:00  ( info)  Safe
2019-11-16 01:01:55.085117-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:55.152608-05:00  ( info)  Safe
2019-11-16 01:01:55.153144-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:55.222963-05:00  ( info)  Safe
2019-11-16 01:01:55.222975-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:56.004785-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"S\",\n                  (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\",\n           (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n        (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n   ))")
2019-11-16 01:01:56.044686-05:00  ( info)  testbed
2019-11-16 01:01:56.045157-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S",
              (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:01:58.175090-05:00  ( info)  Answer list length: 12
2019-11-16 01:01:58.175440-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_lt n3
                                                                    n1)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:01:58.175669-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:01:58.175871-05:00  ( info)  Safe
2019-11-16 01:01:58.176306-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:01:58.176493-05:00  ( info)  Safe
2019-11-16 01:01:58.176714-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:01:58.177002-05:00  ( info)  Safe
2019-11-16 01:01:58.177235-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:01:58.246734-05:00  ( info)  Safe
2019-11-16 01:01:58.247075-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:01:58.294331-05:00  ( info)  Safe
2019-11-16 01:01:58.294342-05:00  ( info)  verifying proves postcondition
2019-11-16 01:01:59.248521-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:01:59.392144-05:00  ( info)  testbed
2019-11-16 01:01:59.392635-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:02:01.013268-05:00  ( info)  Answer list length: 13
2019-11-16 01:02:01.013683-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_lt
                                                                    (size b2)
                                                                    n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:02:01.013874-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:02:01.014114-05:00  ( info)  Safe
2019-11-16 01:02:01.014392-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:02:01.014545-05:00  ( info)  Safe
2019-11-16 01:02:01.014817-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:02:01.015108-05:00  ( info)  Safe
2019-11-16 01:02:01.015440-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:02:01.076033-05:00  ( info)  Safe
2019-11-16 01:02:01.076402-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:02:01.121568-05:00  ( info)  Safe
2019-11-16 01:02:01.121579-05:00  ( info)  verifying proves postcondition
2019-11-16 01:02:02.013447-05:00  ( info)  postcondition unproven, counterexample: ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"O\", (Value.Tuple [])));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                (Value.Ctor (\"S\",\n                   (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))))));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:02:02.178169-05:00  ( info)  testbed
2019-11-16 01:02:02.178671-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("O", (Value.Tuple [])));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Leaf", (Value.Tuple [])))]
  }
2019-11-16 01:02:03.746939-05:00  ( info)  Answer list length: 14
2019-11-16 01:02:03.747253-05:00  ( info)  Candidate invariant: fix f1 (b1:bst) : bool =
  match b1 with
    | Leaf N_fresh_var_0 -> True
    | Node N_fresh_var_0 -> (fun (b2:unit) ->
                               (fun (n1:unit) ->
                                  (fun (b3:unit) ->
                                     match min_max_vals b3 b2 with
                                       | JustLeft N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n1 n2)
                                                                    (f1 b3))
                                                                    N_fresh_var_1
                                       | JustRight N_fresh_var_1 -> (fun (n2:unit) ->
                                                                    and
                                                                    (nat_lt
                                                                    n2 n1)
                                                                    (f1 b2))
                                                                    N_fresh_var_1
                                       | Both N_fresh_var_1 -> (fun (n2:unit) ->
                                                                  (fun (n3:unit) ->
                                                                    nat_between
                                                                    n3 n1 n2)
                                                                    (
                                                                    #2
                                                                    N_fresh_var_1))
                                                                 (#1
                                                                    N_fresh_var_1)
                                       | Neither N_fresh_var_1 -> True)
                                    (#3 N_fresh_var_0))
                                 (#2 N_fresh_var_0))
                              (#1 N_fresh_var_0)
2019-11-16 01:02:03.747465-05:00  ( info)  Checking boundary for:Leaf
2019-11-16 01:02:03.747756-05:00  ( info)  Safe
2019-11-16 01:02:03.747959-05:00  ( info)  Checking boundary for:fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:02:03.748123-05:00  ( info)  Safe
2019-11-16 01:02:03.748386-05:00  ( info)  Checking boundary for:fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:02:03.748546-05:00  ( info)  Safe
2019-11-16 01:02:03.748802-05:00  ( info)  Checking boundary for:fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:02:03.807327-05:00  ( info)  Safe
2019-11-16 01:02:03.807800-05:00  ( info)  Checking boundary for:fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:02:03.864449-05:00  ( info)  Safe
2019-11-16 01:02:03.864459-05:00  ( info)  verifying proves postcondition
2019-11-16 01:02:11.067499-05:00  ( info)  postcondition proven
2019-11-16 01:02:11.067756-05:00  ( info)  verifying: Leaf
2019-11-16 01:02:11.067973-05:00  ( info)  Safe
2019-11-16 01:02:11.068240-05:00  ( info)  verifying: fix size (b:bst) : nat =
  match b with
    | Leaf b -> 0
    | Node b -> add S 0 (add (size (#1 b)) (size (#3 b)))
2019-11-16 01:02:11.068393-05:00  ( info)  Safe
2019-11-16 01:02:11.068642-05:00  ( info)  verifying: fix lookup (b:bst) : nat -> bool =
  fun (x:nat) ->
    match b with
      | Leaf b -> False
      | Node b -> (match nat_eq x (#2 b) with
                     | True c -> True
                     | False c -> (match nat_lt x (#2 b) with
                                     | True c -> lookup (#1 b) x
                                     | False c -> lookup (#3 b) x))
2019-11-16 01:02:11.068836-05:00  ( info)  Safe
2019-11-16 01:02:11.069069-05:00  ( info)  verifying: fix insert (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Node (Leaf, x, Leaf)
      | Node bp -> (match nat_lt x (#2 bp) with
                      | True c -> Node (insert (#1 bp) x, #2 bp, #3 bp)
                      | False c -> (match nat_eq x (#2 bp) with
                                      | True c -> b
                                      | False c -> Node (#1 bp, #2 bp,
                                                          insert (#3 bp) x)))
2019-11-16 01:02:16.150282-05:00  ( info)  Safe
2019-11-16 01:02:16.150608-05:00  ( info)  verifying: fix delete (b:bst) : nat -> bst =
  fun (x:nat) ->
    match b with
      | Leaf bp -> Leaf
      | Node bp -> (match nat_eq x (#2 bp) with
                      | True c -> (match #1 bp with
                                     | Leaf bl -> #3 bp
                                     | Node bl -> (match #3 bp with
                                                     | Leaf br -> #1 bp
                                                     | Node br -> (fun (m:nat) ->
                                                                    Node 
                                                                    (#1 bp,
                                                                    m,
                                                                    delete
                                                                    (#3 bp) m))
                                                                    (
                                                                    min_val
                                                                    (#3 bp))))
                      | False c -> (match nat_lt x (#2 bp) with
                                      | True c -> Node (delete (#1 bp) x,
                                                         #2 bp, #3 bp)
                                      | False c -> Node (#1 bp, #2 bp,
                                                          delete (#3 bp) x)))
2019-11-16 01:02:20.726250-05:00  ( info)  Not a LR, counterexample:
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
                                               Comes from
                                               ("(Value.Ctor (\"Node\",\n   (Value.Tuple\n      [(Value.Ctor (\"Node\",\n          (Value.Tuple\n             [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n               (Value.Ctor (\"O\", (Value.Tuple [])));\n               (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n          ));\n        (Value.Ctor (\"S\", (Value.Ctor (\"O\", (Value.Tuple [])))));\n        (Value.Ctor (\"Node\",\n           (Value.Tuple\n              [(Value.Ctor (\"Node\",\n                  (Value.Tuple\n                     [(Value.Ctor (\"Leaf\", (Value.Tuple [])));\n                       (Value.Ctor (\"S\",\n                          (Value.Ctor (\"S\",\n                             (Value.Ctor (\"O\", (Value.Tuple [])))))\n                          ));\n                       (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n                  ));\n                (Value.Ctor (\"O\", (Value.Tuple [])));\n                (Value.Ctor (\"Leaf\", (Value.Tuple [])))])\n           ))\n        ])\n   ))")
2019-11-16 01:02:20.886359-05:00  ( info)  testbed
2019-11-16 01:02:20.887003-05:00  ( info)  { TestBed.neg_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Node",
             (Value.Tuple
                [(Value.Ctor ("Leaf", (Value.Tuple [])));
                  (Value.Ctor ("S",
                     (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))
                     ));
                  (Value.Ctor ("Leaf", (Value.Tuple [])))])
             ));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Leaf", (Value.Tuple [])))])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S",
                      (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                         ))
                      ));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S",
               (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("O", (Value.Tuple [])))));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Node",
                     (Value.Tuple
                        [(Value.Ctor ("Leaf", (Value.Tuple [])));
                          (Value.Ctor ("O", (Value.Tuple [])));
                          (Value.Ctor ("Leaf", (Value.Tuple [])))])
                     ));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Leaf", (Value.Tuple [])));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("O", (Value.Tuple [])));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("O", (Value.Tuple [])));
            (Value.Ctor ("Leaf", (Value.Tuple [])))])
       ))
    ];
  pos_tests =
  [(Value.Ctor ("Node",
      (Value.Tuple
         [(Value.Ctor ("Leaf", (Value.Tuple [])));
           (Value.Ctor ("O", (Value.Tuple [])));
           (Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
                   (Value.Ctor ("Node",
                      (Value.Tuple
                         [(Value.Ctor ("Leaf", (Value.Tuple [])));
                           (Value.Ctor ("S",
                              (Value.Ctor ("S",
                                 (Value.Ctor ("O", (Value.Tuple [])))))
                              ));
                           (Value.Ctor ("Leaf", (Value.Tuple [])))])
                      ))
                   ])
              ))
           ])
      ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf", (Value.Tuple [])));
                   (Value.Ctor ("O", (Value.Tuple [])));
                   (Value.Ctor ("Leaf", (Value.Tuple [])))])
              ));
            (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))));
            (Value.Ctor ("Node",
               (Value.Tuple
                  [(Value.Ctor ("Leaf", (Value.Tuple [])));
                    (Value.Ctor ("S",
                       (Value.Ctor ("S", (Value.Ctor ("O", (Value.Tuple [])))
                          ))
                       ));
                    (Value.Ctor ("Leaf", (Value.Tuple [])))])
               ))
            ])
       ));
    (Value.Ctor ("Node",
       (Value.Tuple
          [(Value.Ctor ("Node",
              (Value.Tuple
                 [(Value.Ctor ("Leaf"