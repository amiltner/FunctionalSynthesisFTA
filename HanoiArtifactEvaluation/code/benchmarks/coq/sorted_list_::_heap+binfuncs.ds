type list = mu list .
  | Nil
  | Cons of (nat * list)

type nat_option =
  | None
  | Some of nat

struct
  type t = list

  let empty = Nil ;;

  let size =
    fix (size : t -> nat) =
      fun (l : t) ->
        match l binding l with
        | Nil -> O
        | Cons -> S (size l.1)
  ;;

  let maximum =
    fun (l : t) ->
      match l binding l with
      | Nil -> None
      | Cons -> Some (l.0)
  ;;

  let contains =
    fix (contains : t -> nat -> bool) =
      fun (l : t) ->
        fun (n : nat) ->
          match l binding lv with
          | Nil -> False
          | Cons ->
            (match nat_eq (lv.0) n binding c with
             | True -> True
             | False -> contains (lv.1) n)
  ;;

  let insert =
    fun (l : t) ->
      fun (x : nat) ->
        match l binding lp with
        | Nil -> Cons (x, Nil)
        | Cons -> (match nat_lt x lp.0 binding c with
                   | True -> Cons (lp.0, Cons (x,lp.1))
                   | False -> Cons (x, l))
  ;;

  let delete_max =
    fun (l : t) ->
      match l binding lp with
      | Nil -> l
      | Cons ->
        ((fun (res : t * nat_option) ->
           match res.1 binding n with
           | None -> res.0
           | Some -> Cons (n,res.0))
             ((fix (update : t -> t * nat_option) =
               fun (l : t) ->
                 (match l binding lp with
                  | Nil -> (Nil,None)
                  | Cons ->
                    (fun (res : t * nat_option) ->
                      (match res.1 binding n with
                       | None -> (lp.1, (Some (lp.0)))
                       | Some ->
                         (match nat_lt n lp.0 binding c with
                          | False -> (Cons (lp.0, res.0), res.1)
                          | True -> (Cons (n, res.0), (Some (lp.0))))))
                    (update lp.1)))
                    lp.1))
  ;;

  let merge =
    fix (merge : t -> t -> t) =
      fun (h1 : t) ->
        fun (h2 : t) ->
          match h1 binding h1 with
          | Nil -> h2
          | Cons -> merge h1.1 (insert h2 h1.0)
  ;;
end
:
sig
  type t

  val empty : t

  val size : t -> nat

  val maximum : t -> nat_option
  val contains : t -> nat -> bool

  val insert : t -> nat -> t
  val delete_max : t -> t

  val merge : t -> t -> t
end

maintains

forall (h1 : t) .
  forall (h2 : t) .
    forall (i : nat) .
      (and
         (and
            (and
               (nat_eq (O) (size empty))
               (and
                  (nat_eq (size (insert h1 i))
                          (S (size h1)))
                  (implies
                     (nat_lt (O) (size h1))
                     (nat_eq (size h1)
                             (S (size (delete_max h1)))))))
            (and
               (contains (insert h1 i) i)
               (match maximum h1 binding m with
                | None -> True
                | Some -> (match nat_lt m i binding g with
                           | True -> not (contains
                                            (delete_max
                                               (insert h1 i))
                                            i)
                           | False -> True))))
         (and
            (match maximum h1 binding m with
             | None -> True
             | Some -> (match nat_lt m i binding g with
                        | True -> not (contains h1 i)
                        | False -> True))
            (implies (or (contains h1 i)
                         (contains h2 i))
                     (contains (merge h1 h2) i))))