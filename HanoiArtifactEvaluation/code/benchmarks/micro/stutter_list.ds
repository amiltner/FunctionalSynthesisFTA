type list = mu list .
  | Nil
  | Cons of (nat * list)

struct
  type t = list

  let empty = Nil ;;

  let length =
    fix (length : t -> nat) =
      fun (l : t) ->
        match l binding lp with
        | Nil -> O
        | Cons ->
          (match lp.1 binding lp with
           | Nil -> O
           | Cons -> S (length lp.1))
  ;;

  let lookup =
    fix (lookup : t -> nat -> bool) =
      fun (l : t) -> fun (x : nat) ->
        match l binding l with
        | Nil -> False
        | Cons ->
          (match nat_eq l.0 x binding c with
           | True -> True
           | False -> lookup l.1 x)
  ;;

  let insert =
    fun (l : t) ->
      fun (x : nat) ->
        (match (lookup l x) binding c with
         | True -> l
         | False -> Cons(x, Cons(x, l)))
  ;;

  let delete =
    fix (delete : t -> nat -> t) =
      fun (l : t) -> fun (x : nat) ->
          match l binding lp with
          | Nil -> Nil
          | Cons ->
            (match lp.1 binding lp with
             | Nil -> l
             | Cons ->
               (match nat_eq lp.0 x binding c with
                | True -> delete lp.1 x
                | False -> Cons(lp.0, Cons(lp.0, delete lp.1 x))))
  ;;

  let union =
    fix (union : t -> t -> t) =
      fun (la : t) ->
        fun (lb : t) ->
          match la binding la with
          | Nil -> lb
          | Cons -> (union la.1 (insert lb la.0))
  ;;

  let inter =
    fix (inter : t -> t -> t) =
      fun (la : t) ->
        fun (lb : t) ->
          match la binding la with
          | Nil -> Nil
          | Cons -> (match lookup lb la.0 binding r with
                     | True -> Cons (la.0, (inter la.1 lb))
                     | False -> inter la.1 lb)
  ;;
end
:
sig
  type t

  val empty : t

  val length : t -> nat
  val lookup : t -> nat -> bool

  val insert : t -> nat -> t
  val delete : t -> nat -> t

  val union : t -> t -> t
  val inter : t -> t -> t
end

maintains

forall (s1 : t) .
  forall (s2 : t) .
    forall (i : nat) .
      forall (j : nat) .
        (and
          (implies
            (and
              (not (nat_eq i j))
              (lookup s1 j))
            (lookup (delete s1 i) j))
          (and
            (implies
               (or (lookup s1 i)
                   (lookup s2 i))
               (lookup (union s1 s2) i))
            (implies
               (and (lookup s1 i)
                    (lookup s2 i))
               (lookup (inter s1 s2) i))))