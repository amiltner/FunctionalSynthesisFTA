data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
termination measure no_adjacent_pairs :: NatList -> Bool where
  Nil -> True
  Cons x xs -> match xs with -- giving an error on this refinement type
                    Nil -> True
                    Cons y ys -> (x == y) && (comp xs)
  
  
list_compress :: xs:NatList -> { NatList | 
   (len _v <= len xs) &&
   (no_adjacent_pairs _v)
   -- Need to include specification for making sure ever elem in xs is in _v
}
list_compress = ??
