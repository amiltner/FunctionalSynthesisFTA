type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> nat -> nat satisfying

[Nil,0] -> 0,
[Nil,1] -> 0,
[Nil,2] -> 0,
[Nil,3] -> 0,
[Cons(2,Nil),0] -> 2,
[Cons(2,Nil),1] -> 0,
[Cons(2,Nil),2] -> 0,
[Cons(2,Nil),3] -> 0,
[Cons(1,Cons(2,Nil)),0] -> 1,
[Cons(1,Cons(2,Nil)),1] -> 2,
[Cons(1,Cons(2,Nil)),2] -> 0,
[Cons(1,Cons(2,Nil)),3] -> 0,
[Cons(1,Nil),0] -> 1,
[Cons(1,Nil),1] -> 0,
[Cons(1,Nil),2] -> 0,
[Cons(1,Nil),3] -> 0,
[Cons(2,Cons(1,Nil)),0] -> 2,
[Cons(2,Cons(1,Nil)),1] -> 1,
[Cons(2,Cons(1,Nil)),2] -> 0,
[Cons(2,Cons(1,Nil)),3] -> 0,
[Cons(3,Cons(2,Cons(1,Nil))),0] -> 3,
[Cons(3,Cons(2,Cons(1,Nil))),1] -> 2,
[Cons(3,Cons(2,Cons(1,Nil))),2] -> 1,
[Cons(3,Cons(2,Cons(1,Nil))),3] -> 0,

(* TODO: run this with size 3, found correct term but called it impossible... why? *)