type bool =
  | True
  | False

type tree =
  | Leaf
  | Node of tree * bool * tree

type list =
  | Nil
  | Cons of bool * list

let append =
  fix (append : list -> list -> list) =
    fun (l1 : list) ->
      fun (l2 : list) ->
        match l1 with
        | Nil -> l2
        | Cons (h,t) -> Cons(h,append t l2)
;;

synth tree -> list satisfying

[Leaf] -> Nil,
[Node (Leaf, True, Leaf)] -> Cons(True, Nil),
[Node (Leaf, False, Leaf)] -> Cons(False, Nil),
[Node (Node (Leaf, True, Leaf), False, Leaf)] -> Cons(True, Cons(False, Nil)),
[Node (Node (Leaf, False, Leaf), True, Leaf)] -> Cons(False, Cons(True, Nil)),
[Node (Leaf, False, Node (Leaf, True, Leaf))] -> Cons(False, Cons(True, Nil)),
