type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

let hd =
  fun (l:list) ->
    match l with
    | Nil -> 0
    | Cons (x, t) -> x
;;

synth list -> nat satisfying

[Nil] -> 0,
[Cons(1,Nil)] -> 1