type bool =
  | True
  | False

type tree =
  | Leaf
  | Node of tree * bool * tree

type nat =
  | O
  | S of nat

let sum =
  fix (sum : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 binding n1p with
        | O -> n2
        | S -> S (sum n1p n2)
;;

synth tree -> nat satisfying

[Leaf] -> 1,
[Node (Node (Leaf, True, Leaf), True, Leaf)] -> 3,
[Node (Node (Leaf, True, Leaf), True, Node (Leaf, True, Leaf))] -> 4,
