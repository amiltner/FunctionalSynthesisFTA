type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> list -> list satisfying

type bool =
  | True
  | False

let size =
  fix (size : list -> nat) =
    fun (x:list) ->
      match x binding xp with
        | Nil -> O
        | Cons -> S (size (xp.1))
;;

let plus =
  fix (plus : nat -> nat -> nat) =
    fun (x1:nat) ->
      fun (x2:nat) ->
        match x1 binding x1p with
        | O -> x2
        | S -> S (plus x1p x2)
;;

let nat_eq =
  fix (nat_eq : nat -> nat -> bool) =
    fun (x1:nat) -> (fun (x2:nat) ->
      match x1 binding x1p with
      | O -> (match x2 binding x2p with
              | O -> True
              | S -> False)
      | S -> (match x2 binding x2p with
              | O -> False
              | S -> nat_eq x1p x2p))
;;

fun (in1in2:list * list) -> (fun (out : list) ->
  (nat_eq (size out) (plus (size (in1in2.0)) (size (in1in2.1)))))
