type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> nat -> list satisfying

type bool =
  | True
  | False

let size =
  fix (size : list -> nat) =
    fun (x:list) ->
      match x binding xp with
        | Nil -> O
        | Cons -> S (size (xp.1))
;;

let plus =
  fix (plus : nat -> nat -> nat) =
    fun (x1:nat) ->
      fun (x2:nat) ->
        match x1 binding x1p with
        | O -> x2
        | S -> S (plus x1p x2)
;;

let nat_eq =
  fix (nat_eq : nat -> nat -> bool) =
    fun (x1:nat) -> (fun (x2:nat) ->
      match x1 binding x1p with
      | O -> (match x2 binding x2p with
              | O -> True
              | S -> False)
      | S -> (match x2 binding x2p with
              | O -> False
              | S -> nat_eq x1p x2p))
;;

let and =
  fun (b1:bool) ->
    fun (b2:bool) ->
      match b1 binding b1p with
      | True -> b2
      | False -> False
;;

let add =
  fix (add : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n1 binding n1p with
        | O -> n2
        | S -> S (add n1p n2)
;;

let minus =
  fix (minus : nat -> nat -> nat) =
    fun (n1 : nat) ->
      fun (n2 : nat) ->
        match n2 binding n2p with
        | O -> n1
        | S -> (match n1 binding n1p with
                | O -> O
                | S -> minus n1p n2p)
;;

fun (in0in1:list * nat) -> (fun (out : list) ->
    (nat_eq (minus (size (in0in1.0)) in0in1.1) (size out)))