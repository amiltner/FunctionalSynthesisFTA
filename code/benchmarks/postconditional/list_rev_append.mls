type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

let append =
  fix (append : list -> list -> list) =
    fun (l1 : list) ->
      fun (l2 : list) ->
        match l1 binding l1p with
        | Nil -> l2
        | Cons -> Cons(l1p.0,append l1p.1 l2)
;;

synth list -> list satisfying

[Nil] -> Nil,
[Cons(0,Nil)] -> Cons(0,Nil),
[Cons(1,Nil)] -> Cons(1,Nil),
[Cons(0,Cons(1,Nil))] -> Cons(1,Cons(0,Nil)),
[Cons(0,Cons(0,Cons(1,Nil)))] -> Cons(1,Cons(0,Cons(0,Nil))),

(* FTA construction is unexpectedly slow *)
