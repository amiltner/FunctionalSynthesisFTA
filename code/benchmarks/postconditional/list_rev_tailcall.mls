type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

synth list -> list -> list satisfying

type bool =
  | True
  | False

type opt =
  | None
  | Some of nat

let size =
  fix (size : list -> nat) =
    fun (x:list) ->
      match x with
        | Nil -> O
        | Cons (_, t) -> S (size t)
;;

let last =
  fix (last : list -> opt) =
    fun (x:list) ->
      match x with
      | Nil -> None
      | Cons (n, Nil) -> Some n
      | Cons (_, t) -> last t
;;

let and =
  fun (b1:bool) ->
    fun (b2:bool) ->
      match b1 with
      | True -> b2
      | False -> False
;;

let plus =
  fix (plus : nat -> nat -> nat) =
    fun (x1:nat) ->
      fun (x2:nat) ->
        match x1 with
        | O -> x2
        | S x1p -> S (plus x1p x2)
;;

fun (in1in2:list*list) -> (fun (out : list) ->
    match in1in2.0 with
    | Nil -> out == in1in2.1
    | Cons (x, _) -> and ((size out) == (plus (size in1in2.0) (size in1in2.1))) ((Some x) == (last out)))
(*
[Nil,Nil] -> Nil,
[Nil,Cons(0,Nil)] -> Cons(0,Nil),
[Nil,Cons(1,Nil)] -> Cons(1,Nil),
[Nil,Cons(0,Cons(0,Nil))] -> Cons(0,Cons(0,Nil)),
[Nil,Cons(0,Cons(1,Nil))] -> Cons(0,Cons(1,Nil)),
[Nil,Cons(1,Cons(0,Nil))] -> Cons(1,Cons(0,Nil)),
[Nil,Cons(1,Cons(1,Nil))] -> Cons(1,Cons(1,Nil)),
[Nil,Cons(1,Cons(0,Cons(1,Nil)))] -> Cons(1,Cons(0,Cons(1,Nil))),
[Cons(0,Nil),Nil] -> Cons(0,Nil),
[Cons(1,Nil),Nil] -> Cons(1,Nil),
[Cons(1,Nil),Cons(0,Nil)] -> Cons(1,Cons(0,Nil)),
[Cons(1,Nil),Cons(1,Nil)] -> Cons(1,Cons(1,Nil)),
[Cons(1,Nil),Cons(0,Cons(1,Nil))] -> Cons(1,Cons(0,Cons(1,Nil))),
[Cons(0,Cons(1,Nil)),Nil] -> Cons(1,Cons(0,Nil)),*)
