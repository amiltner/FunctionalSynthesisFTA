type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type cmp =
  | LT
  | EQ
  | GT

let compare =
  fix (compare : nat -> nat -> cmp) =
    fun (x1 : nat) ->
      fun (x2 : nat) ->
        match (x1,x2) with
        | (O,O) -> EQ
        | (O,S _) -> LT
        | (S _,O) -> GT
        | (S x1,S x2) -> compare x1 x2
;;

synth list -> nat -> list satisfying

type bool =
  | True
  | False

let and =
  fun (b1:bool) ->
    fun (b2:bool) ->
      match b1 with
      | True -> b2
      | False -> False
;;

let contains =
  fix (contains : list -> nat -> bool) =
    fun (l:list) ->
    fun (n:nat) ->
      match l with
      | Nil -> False
      | Cons (h,t) ->
        match h == n with
        | True -> True
        | False -> contains t n
;;

let for_all =
  fix (for_all : (nat -> bool) -> list -> bool) =
    fun (f:nat -> bool) ->
    fun (l:list) ->
      match l with
      | Nil -> True
      | Cons (h,t) ->
        match f h with
        | False -> False
        | True -> for_all f t
;;

let is_sorted_unique =
  fix (is_sorted : list -> bool) =
  fun (l : list) ->
    match l with
    | Nil -> True
    | Cons (_, Nil) -> True
    | Cons (x, Cons(y, t)) ->
      match (compare x y) == LT with
      | True -> is_sorted (Cons (y, t))
      | False -> False
;;

fun (in1in2:list*nat) -> (fun (out:list) ->
    (and
      (is_sorted_unique out)
      (for_all (contains out) (Cons (in1in2.1, in1in2.0)))))

(*
[Nil,0] -> Cons(0,Nil),
[Nil,1] -> Cons(1,Nil),
[Nil,2] -> Cons(2,Nil),
[Cons(0,Nil),0] -> Cons(0,Nil),
[Cons(0,Nil),1] -> Cons(0,Cons(1,Nil)),
[Cons(1,Nil),0] -> Cons(0,Cons(1,Nil)),
[Cons(1,Nil),1] -> Cons(1,Nil),
[Cons(1,Nil),2] -> Cons(1,Cons(2,Nil)),
[Cons(2,Nil),0] -> Cons(0,Cons(2,Nil)),
[Cons(2,Nil),1] -> Cons(1,Cons(2,Nil)),
[Cons(0,Cons(1,Nil)),0] -> Cons(0,Cons(1,Nil)),
[Cons(0,Cons(1,Nil)),2] -> Cons(0,Cons(1,Cons(2,Nil))),
*)
(* Takes up to size 6, it shouldn't, why does it? *)
