type nat =
  | O
  | S of nat

type list =
  | Nil
  | Cons of nat * list

type tree =
  | Leaf
  | Node of tree * nat * tree

let append =
  fix (append : list -> list -> list) =
    fun (l1 : list) ->
      fun (l2 : list) ->
        match l1 with
        | Nil -> l2
        | Cons (h,t) -> Cons(h,append t l2)
;;

synth tree -> list satisfying

type bool =
  | True
  | False

fun (input:tree) -> (fun (out:list) ->
    match input with
    | Leaf -> out == Nil
    | Node (Leaf, x, Leaf) -> out == (Cons (x, Nil))
    | Node (Node (Leaf, x, Leaf), y, Leaf) -> out == (Cons (x, Cons (y, Nil)))
    | Node (Leaf, x, Node (Leaf, y, Leaf)) -> out == (Cons (y, Cons (x, Nil)))
    | Node (Node (Leaf, x, Leaf), y, Node (Leaf, z, Leaf)) -> out == (Cons (x, Cons (z, Cons(y, Nil))))
    | _ -> True)
(*
[Leaf] -> Nil,
[Node (Leaf, 1, Leaf)] -> Cons(1, Nil),
[Node (Leaf, 2, Leaf)] -> Cons(2, Nil),
[Node (Node (Leaf, 1, Leaf), 2, Leaf)] -> Cons(1, Cons(2, Nil)),
[Node (Leaf, 1, Node (Leaf, 2, Leaf))] -> Cons(2, Cons(1, Nil)),
[Node (Node (Leaf, 1, Leaf), 0, Node (Leaf, 2, Leaf))] -> Cons (1, Cons(2, Cons(0, Nil))),
[Node (Node (Leaf, 2, Leaf), 0, Node (Leaf, 1, Leaf))] -> Cons (2, Cons(1, Cons(0, Nil))),
[Node (Node (Node (Leaf, 2, Leaf), 0, Node (Leaf, 1, Leaf)), 0, Leaf)] -> Cons (2, Cons(1, Cons(0, Cons(0, Nil)))),
[Node (Leaf, 2, Node (Node (Leaf, 2, Leaf), 0, Node (Leaf, 1, Leaf)))] -> Cons (2, Cons(1, Cons(0, Cons(2, Nil)))),
*)

(* this slow *)
