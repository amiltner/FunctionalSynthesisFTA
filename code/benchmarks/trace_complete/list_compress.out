[]
POSSIBLE CALLS
[(Cons (0, Nil),[Cons (0, Nil)])]
[]
[]
POSSIBLE CALLS
[(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[]
[]
POSSIBLE CALLS
[(Nil,[Nil]);(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[]
[]
POSSIBLE CALLS
[(Cons (2, Cons (0, Nil)),[Cons (2, Cons (0, Nil))]);(Nil,[Nil]);(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[]
[]
POSSIBLE CALLS
[(Cons (1, Cons (1, Nil)),[Cons (1, Nil)]);(Cons (2, Cons (0, Nil)),[Cons (2, Cons (0, Nil))]);(Nil,[Nil]);(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[]
[]
POSSIBLE CALLS
[(Cons (1, Cons (0, Cons (0, Nil))),[Cons (1, Cons (0, Nil))]);(Cons (1, Cons (1, Nil)),[Cons (1, Nil)]);(Cons (2, Cons (0, Nil)),[Cons (2, Cons (0, Nil))]);(Nil,[Nil]);(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[]
[]
POSSIBLE CALLS
[(Cons (1, Nil),[Cons (1, Nil)]);(Cons (1, Cons (0, Cons (0, Nil))),[Cons (1, Cons (0, Nil))]);(Cons (1, Cons (1, Nil)),[Cons (1, Nil)]);(Cons (2, Cons (0, Nil)),[Cons (2, Cons (0, Nil))]);(Nil,[Nil]);(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[]
[]
POSSIBLE CALLS
[(Cons (0, Cons (1, Cons (1, Nil))),[Cons (0, Cons (1, Nil))]);(Cons (1, Nil),[Cons (1, Nil)]);(Cons (1, Cons (0, Cons (0, Nil))),[Cons (1, Cons (0, Nil))]);(Cons (1, Cons (1, Nil)),[Cons (1, Nil)]);(Cons (2, Cons (0, Nil)),[Cons (2, Cons (0, Nil))]);(Nil,[Nil]);(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[]
[(Cons (0, Cons (0, Nil)),Cons (0, Nil));(Cons (1, Cons (1, Nil)),Cons (1, Nil));(Cons (1, Cons (0, Cons (0, Nil))),Cons (1, Cons (0, Nil)))]
POSSIBLE CALLS
[(Cons (2, Cons (1, Cons (0, Cons (0, Nil)))),[Cons (2, Cons (1, Cons (0, Nil)))]);(Cons (0, Cons (1, Cons (1, Nil))),[Cons (0, Cons (1, Nil))]);(Cons (1, Nil),[Cons (1, Nil)]);(Cons (1, Cons (0, Cons (0, Nil))),[Cons (1, Cons (0, Nil))]);(Cons (1, Cons (1, Nil)),[Cons (1, Nil)]);(Cons (2, Cons (0, Nil)),[Cons (2, Cons (0, Nil))]);(Nil,[Nil]);(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[(true,(Cons (0, Cons (0, Nil)),Cons (0, Nil)));(true,(Cons (1, Cons (1, Nil)),Cons (1, Nil)));(true,(Cons (1, Cons (0, Cons (0, Nil))),Cons (1, Cons (0, Nil))))]
[(Cons (0, Nil),Cons (0, Nil));(Cons (1, Nil),Cons (1, Nil));(Cons (0, Cons (0, Nil)),Cons (0, Nil));(Cons (1, Cons (1, Nil)),Cons (1, Nil));(Cons (1, Cons (0, Cons (0, Nil))),Cons (1, Cons (0, Nil)));(Cons (2, Cons (1, Cons (0, Cons (0, Nil)))),Cons (2, Cons (1, Cons (0, Nil))))]
POSSIBLE CALLS
[(Cons (2, Cons (2, Cons (1, Cons (0, Cons (0, Nil))))),[Cons (2, Cons (1, Cons (0, Nil)))]);(Cons (2, Cons (1, Cons (0, Cons (0, Nil)))),[Cons (2, Cons (1, Cons (0, Nil)))]);(Cons (0, Cons (1, Cons (1, Nil))),[Cons (0, Cons (1, Nil))]);(Cons (1, Nil),[Cons (1, Nil)]);(Cons (1, Cons (0, Cons (0, Nil))),[Cons (1, Cons (0, Nil))]);(Cons (1, Cons (1, Nil)),[Cons (1, Nil)]);(Cons (2, Cons (0, Nil)),[Cons (2, Cons (0, Nil))]);(Nil,[Nil]);(Cons (0, Cons (0, Nil)),[Cons (0, Nil)]);(Cons (0, Nil),[Cons (0, Nil)])]
[(true,(Cons (0, Nil),Cons (0, Nil)));(true,(Cons (1, Nil),Cons (1, Nil)));(true,(Cons (0, Cons (0, Nil)),Cons (0, Nil)));(true,(Cons (1, Cons (1, Nil)),Cons (1, Nil)));(true,(Cons (1, Cons (0, Cons (0, Nil))),Cons (1, Cons (0, Nil))));(true,(Cons (2, Cons (1, Cons (0, Cons (0, Nil)))),Cons (2, Cons (1, Cons (0, Nil)))))]
fix (f : list -> list) =
  fun (x:list) ->
    match x with
      | Nil _ -> x
      | Cons _ -> (match Un_Cons x . 1 with
                     | Nil _ -> x
                     | Cons _ -> (match compare (Un_Cons (Un_Cons x . 1) . 0)
                                          (Un_Cons x . 0) with
                                    | LT _ -> Cons (Un_Cons x . 0,
                                                     f (Un_Cons x . 1))
                                    | EQ _ -> f (Un_Cons x . 1)
                                    | GT _ -> Cons (Un_Cons x . 0,
                                                     f (Un_Cons x . 1))))