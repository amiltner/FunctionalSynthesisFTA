[]
POSSIBLE CALLS
[(Node (Leaf, 1, Leaf),[Cons (1, Nil)])]
[]
[]
POSSIBLE CALLS
[(Leaf,[Nil]);(Node (Leaf, 1, Leaf),[Cons (1, Nil)])]
[]
[(Leaf,Nil);(Node (Leaf, 1, Leaf),Cons (1, Nil))]
POSSIBLE CALLS
[(Node (Node (Leaf, 1, Leaf), 2, Leaf),[Cons (1, Cons (2, Nil))]);(Leaf,[Nil]);(Node (Leaf, 1, Leaf),[Cons (1, Nil)])]
[(true,(Leaf,Nil));(true,(Node (Leaf, 1, Leaf),Cons (1, Nil)))]
[(Leaf,Nil);(Node (Leaf, 1, Leaf),Cons (1, Nil));(Node (Leaf, 2, Leaf),Cons (2, Nil))]
POSSIBLE CALLS
[(Node (Leaf, 1, Node (Leaf, 2, Leaf)),[Cons (2, Cons (1, Nil))]);(Node (Node (Leaf, 1, Leaf), 2, Leaf),[Cons (1, Cons (2, Nil))]);(Leaf,[Nil]);(Node (Leaf, 1, Leaf),[Cons (1, Nil)])]
[(true,(Leaf,Nil));(true,(Node (Leaf, 1, Leaf),Cons (1, Nil)));(true,(Node (Leaf, 2, Leaf),Cons (2, Nil)))]
[(Leaf,Nil);(Node (Leaf, 1, Leaf),Cons (1, Nil));(Node (Leaf, 2, Leaf),Cons (2, Nil))]
POSSIBLE CALLS
[(Node (Leaf, 1, Node (Leaf, 2, Leaf)),[Cons (2, Cons (1, Nil))]);(Node (Node (Leaf, 1, Leaf), 2, Leaf),[Cons (1, Cons (2, Nil))]);(Leaf,[Nil]);(Node (Leaf, 1, Leaf),[Cons (1, Nil)])]
[(true,(Leaf,Nil));(true,(Node (Leaf, 1, Leaf),Cons (1, Nil)));(true,(Node (Leaf, 2, Leaf),Cons (2, Nil)))]
fix (f : tree -> list) =
  fun (x:tree) ->
    match x with
      | Leaf _ -> Nil
      | Node _ -> append (append (f (Un_Node x . 0)) (f (Un_Node x . 2)))
                    Cons (Un_Node x . 1, Nil)