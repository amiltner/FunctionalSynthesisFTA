
import leon.lang._
import leon.lang.synthesis._
import leon.annotation._

object Blah {
  
sealed abstract class Nat
case class S(nat: Nat) extends Nat
case object Z extends Nat
  
sealed abstract class NatTree
case object Leaf extends NatTree
case class Node(left: NatTree, n: Nat, right: NatTree) extends NatTree
  
sealed abstract class Cmp
case object LT extends Cmp
case object EQ extends Cmp
case object GT extends Cmp
  
def nat_compare(n1: Nat, n2: Nat): Cmp =
  n1 match {
    case Z =>
      n2 match {
        case Z    => EQ
        case S(_) => LT
      }
    case S(m1) =>
      n2 match {
        case Z     => GT
        case S(m2) => nat_compare(m1, m2)
      }
  }
  
def tree_binsert(t: NatTree, n: Nat): NatTree = { choose { (out:NatTree) => 

   (((t == Leaf) && (n == Z)) ==> (out == Node(Leaf, Z, Leaf))) &&
   (((t == Leaf) && (n == S(Z))) ==> (out == Node(Leaf, S(Z), Leaf))) &&
   (((t == Leaf) && (n == S(S(Z)))) ==> (out == Node(Leaf, S(S(Z)), Leaf))) &&
   (((t == Node(Leaf, S(Z), Leaf)) && (n == Z)) ==> (out == Node(Node(Leaf, Z, Leaf), S(Z), Leaf))) &&
   (((t == Node(Leaf, S(Z), Leaf)) && (n == S(Z))) ==> (out == Node(Leaf, S(Z), Leaf))) &&
   (((t == Node(Leaf, S(Z), Leaf)) && (n == S(S(Z)))) ==> (out == Node(Leaf, S(Z), Node(Leaf, S(S(Z)), Leaf)))) &&
   (((t == Node(Leaf, Z, Leaf)) && (n == Z)) ==> (out == Node(Leaf, Z, Leaf))) &&
   (((t == Node(Leaf, Z, Leaf)) && (n == S(Z))) ==> (out == Node(Leaf, Z, Node(Leaf, S(Z), Leaf)))) &&
   (((t == Node(Leaf, Z, Leaf)) && (n == S(S(Z)))) ==> (out == Node(Leaf, Z, Node(Leaf, S(S(Z)), Leaf)))) &&
   (((t == Node(Leaf, S(S(Z)), Leaf)) && (n == Z)) ==> (out == Node(Node(Leaf, Z, Leaf), S(S(Z)), Leaf))) &&
   (((t == Node(Leaf, S(S(Z)), Leaf)) && (n == S(Z))) ==> (out == Node(Node(Leaf, S(Z), Leaf), S(S(Z)), Leaf))) &&
   (((t == Node(Leaf, S(S(Z)), Leaf)) && (n == S(S(Z)))) ==> (out == Node(Leaf, S(S(Z)), Leaf))) &&
   (((t == Node(Node(Leaf, Z, Leaf), S(Z), Leaf)) && (n == Z)) ==> (out == Node(Node(Leaf, Z, Leaf), S(Z), Leaf))) &&
   (((t == Node(Node(Leaf, Z, Leaf), S(Z), Leaf)) && (n == S(Z))) ==> (out == Node(Node(Leaf, Z, Leaf), S(Z), Leaf))) &&
   (((t == Node(Node(Leaf, Z, Leaf), S(Z), Leaf)) && (n == S(S(Z)))) ==> (out == Node(Node(Leaf, Z, Leaf), S(Z), Node(Leaf, S(S(Z)), Leaf)))) &&
   (((t == Node(Leaf, Z, Node(Leaf, S(Z), Leaf))) && (n == S(S(Z)))) ==> (out == Node(Leaf, Z, Node(Leaf, S(Z), Node(Leaf, S(S(Z)), Leaf))))) &&
   (((t == Node(Node(Leaf, S(Z), Leaf), S(S(Z)), Leaf)) && (n == Z)) ==> (out == Node(Node(Node(Leaf, Z, Leaf), S(Z), Leaf), S(S(Z)), Leaf))) &&
   (((t == Node(Leaf, S(Z), Node(Leaf, S(S(Z)), Leaf))) && (n == Z)) ==> (out == Node(Node(Leaf, Z, Leaf), S(Z), Node(Leaf, S(S(Z)), Leaf)))) &&
   (((t == Node(Leaf, S(Z), Node(Leaf, S(S(Z)), Leaf))) && (n == S(Z))) ==> (out == Node(Leaf, S(Z), Node(Leaf, S(S(Z)), Leaf)))) &&
   (((t == Node(Node(Leaf, S(Z), Leaf), S(S(Z)), Leaf)) && (n == Z)) ==> (out == Node(Node(Node(Leaf, Z, Leaf), S(Z), Leaf), S(S(Z)), Leaf))) &&
   true

} }

}