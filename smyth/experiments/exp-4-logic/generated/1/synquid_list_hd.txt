
data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
list_hd :: xs:NatList -> { Nat | 

   (xs == Nil ==> _v == Z) &&
   (xs == (Cons Z Nil) ==> _v == Z) &&
   (xs == (Cons (S Z) Nil) ==> _v == (S Z)) &&
   True

}
list_hd = ??