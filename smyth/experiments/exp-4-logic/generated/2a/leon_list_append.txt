
import leon.lang._
import leon.lang.synthesis._
import leon.annotation._

object Blah {
  
sealed abstract class Nat
case class S(nat: Nat) extends Nat
case object Z extends Nat
  
sealed abstract class NatList
case class Cons(head: Nat, tail: NatList) extends NatList
case object Nil extends NatList
  
def list_append(xs: NatList, ys: NatList): NatList = { choose { (out:NatList) => 

   (((xs == Nil) && (ys == Nil)) ==> (out == Nil)) &&
// (((xs == Nil) && (ys == Cons(Z, Nil))) ==> (out == Cons(Z, Nil))) &&
// (((xs == Cons(Z, Nil)) && (ys == Nil)) ==> (out == Cons(Z, Nil))) &&
   (((xs == Cons(Z, Nil)) && (ys == Cons(Z, Nil))) ==> (out == Cons(Z, Cons(Z, Nil)))) &&
   (((xs == Cons(S(Z), Cons(Z, Nil))) && (ys == Nil)) ==> (out == Cons(S(Z), Cons(Z, Nil)))) &&
   (((xs == Cons(S(Z), Cons(Z, Nil))) && (ys == Cons(Z, Nil))) ==> (out == Cons(S(Z), Cons(Z, Cons(Z, Nil))))) &&
   true

} }

}