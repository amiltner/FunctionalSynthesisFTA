
data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
list_map :: NatList -> (Nat -> Nat) -> NatList
list_map = \xs . \f .
  match xs with
    Nil            -> Nil
    Cons head tail -> Cons (f head) (list_map tail f)
  
list_inc :: xs:NatList -> { NatList | 

   (xs == Nil ==> _v == Nil) &&
   (xs == (Cons (S Z) (Cons (S (S Z)) Nil)) ==> _v == (Cons (S (S Z)) (Cons (S (S (S Z))) Nil))) &&
-- (xs == (Cons Z (Cons Z Nil)) ==> _v == (Cons (S Z) (Cons (S Z) Nil))) &&
-- (xs == (Cons (S (S (S Z))) (Cons (S (S (S (S Z)))) (Cons (S (S (S (S (S Z))))) Nil))) ==> _v == (Cons (S (S (S (S Z)))) (Cons (S (S (S (S (S Z))))) (Cons (S (S (S (S (S (S Z)))))) Nil)))) &&
   True

}
list_inc = ??