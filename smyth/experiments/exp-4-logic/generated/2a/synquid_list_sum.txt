
data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
list_fold :: (Nat -> Nat -> Nat) -> Nat -> NatList -> Nat
list_fold = \f . \acc . \xs .
  match xs with
    Nil            -> acc
    Cons head tail -> f (list_fold f acc tail) head
  
nat_add :: Nat -> Nat -> Nat
nat_add = \n1 . \n2 .
  match n1 with
    Z   -> n2
    S m -> S (nat_add m n2)
  
list_sum :: xs:NatList -> { Nat | 

   (xs == Nil ==> _v == Z) &&
-- (xs == (Cons (S Z) Nil) ==> _v == (S Z)) &&
   (xs == (Cons (S (S Z)) (Cons (S Z) Nil)) ==> _v == (S (S (S Z)))) &&
   True

}
list_sum = ??