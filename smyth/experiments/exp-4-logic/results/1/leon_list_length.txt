
import leon.lang._
import leon.lang.synthesis._
import leon.annotation._

object Blah {
  
sealed abstract class Nat
case class S(nat: Nat) extends Nat
case object Z extends Nat
  
sealed abstract class NatList
case class Cons(head: Nat, tail: NatList) extends NatList
case object Nil extends NatList
  
def list_length(xs: NatList): Nat = { choose { (out:Nat) => 

   ((xs == Nil) ==> (out == Z)) &&
   ((xs == Cons(Z, Nil)) ==> (out == S(Z))) &&
   ((xs == Cons(Z, Cons(Z, Nil))) ==> (out == S(S(Z)))) &&
   true

} }

}

xs match {
  case Nil =>
    Z
  case Cons(head, tail) =>
    S(list_length(tail))
}

Correct
