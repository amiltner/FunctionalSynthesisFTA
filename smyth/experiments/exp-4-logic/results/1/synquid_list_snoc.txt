
data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
list_snoc :: xs:NatList -> n:Nat -> { NatList | 

   (xs == Nil && n == Z ==> _v == (Cons Z Nil)) &&
   (xs == Nil && n == (S Z) ==> _v == (Cons (S Z) Nil)) &&
   (xs == (Cons Z Nil) && n == Z ==> _v == (Cons Z (Cons Z Nil))) &&
   (xs == (Cons Z Nil) && n == (S Z) ==> _v == (Cons Z (Cons (S Z) Nil))) &&
   (xs == (Cons (S Z) (Cons Z Nil)) && n == Z ==> _v == (Cons (S Z) (Cons Z (Cons Z Nil)))) &&
   (xs == (Cons (S Z) (Cons Z Nil)) && n == (S Z) ==> _v == (Cons (S Z) (Cons Z (Cons (S Z) Nil)))) &&
   (xs == (Cons (S (S Z)) (Cons (S Z) (Cons Z Nil))) && n == Z ==> _v == (Cons (S (S Z)) (Cons (S Z) (Cons Z (Cons Z Nil))))) &&
   (xs == (Cons (S (S Z)) (Cons (S Z) (Cons Z Nil))) && n == (S Z) ==> _v == (Cons (S (S Z)) (Cons (S Z) (Cons Z (Cons (S Z) Nil))))) &&
   True

}
list_snoc = ??

-e=True

list_snoc = \xs . \n .
match n with
Z ->
match xs with
Nil -> Cons n xs
Cons x5 x6 -> Cons x5 (list_snoc x6 n)
S x12 ->
match xs with
Nil -> Cons n xs
Cons x17 x18 -> Cons x17 (list_snoc x18
n)

-e=False

list_snoc = \xs . \n .
match xs with
Nil -> Cons n xs
Cons x5 x6 -> Cons x5 (list_snoc x6 n)

Correct (e=False)
