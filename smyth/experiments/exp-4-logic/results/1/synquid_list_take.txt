
data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
list_take :: n:Nat -> xs:NatList -> { NatList | 

   (n == Z && xs == Nil ==> _v == Nil) &&
   (n == Z && xs == (Cons (S Z) Nil) ==> _v == Nil) &&
   (n == Z && xs == (Cons Z (Cons (S Z) Nil)) ==> _v == Nil) &&
   (n == Z && xs == (Cons (S Z) (Cons Z (Cons (S Z) Nil))) ==> _v == Nil) &&
   (n == (S Z) && xs == Nil ==> _v == Nil) &&
   (n == (S Z) && xs == (Cons (S Z) Nil) ==> _v == (Cons (S Z) Nil)) &&
   (n == (S Z) && xs == (Cons Z (Cons (S Z) Nil)) ==> _v == (Cons Z Nil)) &&
   (n == (S Z) && xs == (Cons (S Z) (Cons Z (Cons (S Z) Nil))) ==> _v == (Cons (S Z) Nil)) &&
   (n == (S (S Z)) && xs == Nil ==> _v == Nil) &&
   (n == (S (S Z)) && xs == (Cons (S Z) Nil) ==> _v == (Cons (S Z) Nil)) &&
   (n == (S (S Z)) && xs == (Cons Z (Cons (S Z) Nil)) ==> _v == (Cons Z (Cons (S Z) Nil))) &&
   (n == (S (S Z)) && xs == (Cons (S Z) (Cons Z (Cons (S Z) Nil))) ==> _v == (Cons (S Z) (Cons Z Nil))) &&
   True

}
list_take = ??

list_take = \n . \xs .
match n with
Z -> Nil
S x2 ->
match xs with
Nil -> xs
Cons x5 x6 -> Cons x5 (list_take x2 x6)

Correct
