
import leon.lang._
import leon.lang.synthesis._
import leon.annotation._

object Blah {
  
sealed abstract class Nat
case class S(nat: Nat) extends Nat
case object Z extends Nat
  
sealed abstract class NatList
case class Cons(head: Nat, tail: NatList) extends NatList
case object Nil extends NatList
  
def list_pairwise_swap(xs: NatList): NatList = { choose { (out:NatList) => 

   ((xs == Nil) ==> (out == Nil)) &&
// ((xs == Cons(Z, Nil)) ==> (out == Nil)) &&
   ((xs == Cons(S(Z), Nil)) ==> (out == Nil)) &&
// ((xs == Cons(Z, Cons(S(Z), Nil))) ==> (out == Cons(S(Z), Cons(Z, Nil)))) &&
   ((xs == Cons(S(Z), Cons(Z, Nil))) ==> (out == Cons(Z, Cons(S(Z), Nil)))) &&
   ((xs == Cons(S(Z), Cons(Z, Cons(S(Z), Nil)))) ==> (out == Nil)) &&
   ((xs == Cons(Z, Cons(S(Z), Cons(Z, Cons(S(Z), Nil))))) ==> (out == Cons(S(Z), Cons(Z, Cons(S(Z), Cons(Z, Nil)))))) &&
   true

} }

}

xs match {
  case Nil =>
    Nil
  case Cons(head, tail) =>
    tail match {
      case Nil =>
        Nil
      case Cons(head$1, tail$1) =>
        val rec: NatList = list_pairwise_swap(tail$1)
        list_pairwise_swap(tail) match {
          case Nil =>
            Cons(head$1, Cons(head, rec))
          case Cons(head$2, tail$2) =>
            rec
        }
    }
}

Correct (weird)
