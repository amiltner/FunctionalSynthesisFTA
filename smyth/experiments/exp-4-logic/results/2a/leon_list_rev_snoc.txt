
import leon.lang._
import leon.lang.synthesis._
import leon.annotation._

object Blah {
  
sealed abstract class Nat
case class S(nat: Nat) extends Nat
case object Z extends Nat
  
sealed abstract class NatList
case class Cons(head: Nat, tail: NatList) extends NatList
case object Nil extends NatList
  
def list_snoc(xs: NatList, n: Nat): NatList =
  xs match {
    case Nil             => Cons (n, Nil)
    case Cons(head,tail) => Cons (head, list_snoc(tail,n))
  }
  
def list_rev_snoc(xs: NatList): NatList = { choose { (out:NatList) => 

   ((xs == Nil) ==> (out == Nil)) &&
// ((xs == Cons(Z, Nil)) ==> (out == Cons(Z, Nil))) &&
// ((xs == Cons(S(Z), Nil)) ==> (out == Cons(S(Z), Nil))) &&
   ((xs == Cons(Z, Cons(S(Z), Nil))) ==> (out == Cons(S(Z), Cons(Z, Nil)))) &&
   ((xs == Cons(Z, Cons(Z, Cons(S(Z), Nil)))) ==> (out == Cons(S(Z), Cons(Z, Cons(Z, Nil))))) &&
   true

} }

}

xs match {
  case Nil =>
    Nil
  case Cons(head, tail) =>
    list_snoc(list_rev_snoc(tail), head)
}

Correct
