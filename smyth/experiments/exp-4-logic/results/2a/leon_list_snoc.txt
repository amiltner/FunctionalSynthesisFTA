
import leon.lang._
import leon.lang.synthesis._
import leon.annotation._

object Blah {
  
sealed abstract class Nat
case class S(nat: Nat) extends Nat
case object Z extends Nat
  
sealed abstract class NatList
case class Cons(head: Nat, tail: NatList) extends NatList
case object Nil extends NatList
  
def list_snoc(xs: NatList, n: Nat): NatList = { choose { (out:NatList) => 

   (((xs == Nil) && (n == Z)) ==> (out == Cons(Z, Nil))) &&
   (((xs == Nil) && (n == S(Z))) ==> (out == Cons(S(Z), Nil))) &&
// (((xs == Cons(Z, Nil)) && (n == Z)) ==> (out == Cons(Z, Cons(Z, Nil)))) &&
// (((xs == Cons(Z, Nil)) && (n == S(Z))) ==> (out == Cons(Z, Cons(S(Z), Nil)))) &&
// (((xs == Cons(S(Z), Cons(Z, Nil))) && (n == Z)) ==> (out == Cons(S(Z), Cons(Z, Cons(Z, Nil))))) &&
// (((xs == Cons(S(Z), Cons(Z, Nil))) && (n == S(Z))) ==> (out == Cons(S(Z), Cons(Z, Cons(S(Z), Nil))))) &&
// (((xs == Cons(S(S(Z)), Cons(S(Z), Cons(Z, Nil)))) && (n == Z)) ==> (out == Cons(S(S(Z)), Cons(S(Z), Cons(Z, Cons(Z, Nil)))))) &&
   (((xs == Cons(S(S(Z)), Cons(S(Z), Cons(Z, Nil)))) && (n == S(Z))) ==> (out == Cons(S(S(Z)), Cons(S(Z), Cons(Z, Cons(S(Z), Nil)))))) &&
   true

} }

}

xs match {
  case Nil =>
    Cons(n, Nil)
  case Cons(head, tail) =>
    Cons(head, list_snoc(tail, n))
}

Correct
