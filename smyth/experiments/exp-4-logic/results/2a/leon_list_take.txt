
import leon.lang._
import leon.lang.synthesis._
import leon.annotation._

object Blah {
  
sealed abstract class Nat
case class S(nat: Nat) extends Nat
case object Z extends Nat
  
sealed abstract class NatList
case class Cons(head: Nat, tail: NatList) extends NatList
case object Nil extends NatList
  
def list_take(n: Nat, xs: NatList): NatList = { choose { (out:NatList) => 

   (((n == Z) && (xs == Nil)) ==> (out == Nil)) &&
// (((n == Z) && (xs == Cons(S(Z), Nil))) ==> (out == Nil)) &&
   (((n == Z) && (xs == Cons(Z, Cons(S(Z), Nil)))) ==> (out == Nil)) &&
// (((n == Z) && (xs == Cons(S(Z), Cons(Z, Cons(S(Z), Nil))))) ==> (out == Nil)) &&
// (((n == S(Z)) && (xs == Nil)) ==> (out == Nil)) &&
   (((n == S(Z)) && (xs == Cons(S(Z), Nil))) ==> (out == Cons(S(Z), Nil))) &&
   (((n == S(Z)) && (xs == Cons(Z, Cons(S(Z), Nil)))) ==> (out == Cons(Z, Nil))) &&
// (((n == S(Z)) && (xs == Cons(S(Z), Cons(Z, Cons(S(Z), Nil))))) ==> (out == Cons(S(Z), Nil))) &&
// (((n == S(S(Z))) && (xs == Nil)) ==> (out == Nil)) &&
// (((n == S(S(Z))) && (xs == Cons(S(Z), Nil))) ==> (out == Cons(S(Z), Nil))) &&
// (((n == S(S(Z))) && (xs == Cons(Z, Cons(S(Z), Nil)))) ==> (out == Cons(Z, Cons(S(Z), Nil)))) &&
   (((n == S(S(Z))) && (xs == Cons(S(Z), Cons(Z, Cons(S(Z), Nil))))) ==> (out == Cons(S(Z), Cons(Z, Nil)))) &&
   true

} }

}

n match {
  case Z =>
    Nil
  case S(nat) =>
    xs match {
      case Nil =>
        Nil
      case Cons(head, tail) =>
        Cons(head, list_take(nat, tail))
    }
}

Correct
