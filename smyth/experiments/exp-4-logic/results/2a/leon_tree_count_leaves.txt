
import leon.lang._
import leon.lang.synthesis._
import leon.annotation._

object Blah {
  
sealed abstract class Nat
case class S(nat: Nat) extends Nat
case object Z extends Nat
  
sealed abstract class Boolean
case object T extends Boolean
case object F extends Boolean
  
sealed abstract class BooleanTree
case object Leaf extends BooleanTree
case class Node(left: BooleanTree, n: Boolean, right: BooleanTree) extends BooleanTree
  
def nat_add(n1: Nat, n2: Nat): Nat =
  n1 match {
    case Z    => n2
    case S(m) => S (nat_add(m, n2))
  }
  
def tree_count_leaves(t: BooleanTree): Nat = { choose { (out:Nat) => 

   ((t == Leaf) ==> (out == S(Z))) &&
// ((t == Node(Leaf, T, Leaf)) ==> (out == S(S(Z)))) &&
   ((t == Node(Node(Leaf, T, Leaf), T, Leaf)) ==> (out == S(S(S(Z))))) &&
// ((t == Node(Leaf, T, Node(Leaf, T, Leaf))) ==> (out == S(S(S(Z))))) &&
// ((t == Node(Node(Node(Leaf, T, Leaf), T, Leaf), T, Leaf)) ==> (out == S(S(S(S(Z)))))) &&
   ((t == Node(Node(Leaf, T, Leaf), T, Node(Leaf, T, Leaf))) ==> (out == S(S(S(S(Z)))))) &&
// ((t == Node(Node(Leaf, T, Leaf), T, Node(Node(Leaf, T, Leaf), T, Node(Leaf, T, Leaf)))) ==> (out == S(S(S(S(S(S(Z)))))))) &&
   true

} }

}

t match {
  case Leaf =>
    S(Z)
  case Node(left, n, right) =>
    nat_add(tree_count_leaves(right), tree_count_leaves(left))
}

Correct
