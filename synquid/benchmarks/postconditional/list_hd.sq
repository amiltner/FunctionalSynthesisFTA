data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList
  
list_hd :: xs:NatList -> { Nat | 
   -- Spec from GitHub, tried to implement matching as spec
   (xs == Nil ==> _v == Z) &&
   (xs == (Cons (S Z) Nil) ==> _v == (S Z)) 

}
list_hd = ??
