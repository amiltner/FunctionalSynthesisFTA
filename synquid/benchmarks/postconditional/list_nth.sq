data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
list_nth :: n:Nat -> l:NatList -> { Nat | 

   (dec n >= len l ==> _v == Z) &&
   ((dec n == 0 && l == Cons (S Z) (Cons Z Nil)) ==> _v == (S Z)) &&
   ((dec n == 1 && l == Cons (S Z) (Cons Z Nil)) ==> _v == Z) &&
   ((dec n == 0 && l == Cons (S (S Z)) (Cons (S Z) (Cons Z Nil))) ==> _v == (S (S Z))) &&
   ((dec n == 1 && l == Cons (S (S Z)) (Cons (S Z) (Cons Z Nil))) ==> _v == (S Z)) &&
   ((dec n == 2 && l == Cons (S (S Z)) (Cons (S Z) (Cons Z Nil))) ==> _v == Z) &&
   ((dec n == 0 && l == Cons Z (Cons Z (Cons Z Nil))) ==> _v == Z) &&
   ((dec n == 1 && l == Cons Z (Cons Z (Cons Z Nil))) ==> _v == Z) &&
   ((dec n == 2 && l == Cons Z (Cons Z (Cons Z Nil))) ==> _v == Z) &&
   ((dec n == 0 && l == Cons (S Z) (Cons (S (S Z)) (Cons (S Z) (Cons Z Nil)))) ==> _v == (S Z)) &&
   ((dec n == 2 && l == Cons (S Z) (Cons (S (S Z)) (Cons (S Z) (Cons Z Nil)))) ==> _v == (S Z)) &&
   ((dec n == 1 && l == Cons (S Z) (Cons (S (S Z)) (Cons (S Z) (Cons Z Nil)))) ==> _v == (S (S Z))) &&
   ((dec n == 3 && l == Cons (S Z) (Cons (S (S Z)) (Cons (S Z) (Cons Z Nil)))) ==> _v == Z) 
   

}
list_nth = ??
-- This one times out I think
