data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m
  
data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
  
list_snoc :: l:NatList -> n:Nat -> { NatList | 

   (l == Nil && n == Z ==> _v == (Cons Z Nil)) &&
   (l == Nil && n == (S Z) ==> _v == (Cons (S Z) Nil)) &&
   (l == (Cons Z Nil) && n == Z ==> _v == (Cons Z (Cons Z Nil))) &&
   (l == (Cons Z Nil) && n == (S Z) ==> _v == (Cons Z (Cons (S Z) Nil))) &&
   (l == (Cons (S Z) (Cons Z Nil)) && n == Z ==> _v == (Cons (S Z) (Cons Z (Cons Z Nil)))) &&
   (l == (Cons (S Z) (Cons Z Nil)) && n == (S Z) ==> _v == (Cons (S Z) (Cons Z (Cons (S Z) Nil)))) 

}
list_snoc = ??
