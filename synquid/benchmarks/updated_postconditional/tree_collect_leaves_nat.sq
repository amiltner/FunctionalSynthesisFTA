
data Nat where
  Z :: Nat
  S :: Nat -> Nat

termination measure dec :: Nat -> {Int | _v >= 0} where
  Z -> 0
  S m -> 1 + dec m

data NatList where
  Nil :: NatList
  Cons :: Nat -> NatList -> NatList

termination measure len :: NatList -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs
 
data NatTree where
  Leaf :: NatTree
  Node :: NatTree -> Nat -> NatTree -> NatTree
 
tree_collect_leaves :: t:NatTree -> { NatList | 

   (t == Leaf ==> _v == Nil) &&
   (t == (Node Leaf Z Leaf) ==> _v == (Cons Z Nil)) &&
   (t == (Node Leaf (S Z) Leaf) ==> _v == (Cons (S Z) Nil)) &&
   (t == (Node (Node Leaf (S Z) Leaf) Z Leaf) ==> _v == (Cons (S Z) (Cons Z Nil))) &&
   (t == (Node (Node Leaf (S (S Z)) Leaf) (S Z) Leaf) ==> _v == (Cons (S (S Z)) (Cons (S Z) Nil))) &&
   -- Again, this ends up being wrong without more specifications, but with examples comes errors
   True

}
tree_collect_leaves = ??
